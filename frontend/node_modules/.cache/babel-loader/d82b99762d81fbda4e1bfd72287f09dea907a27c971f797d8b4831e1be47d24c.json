{"ast":null,"code":"// frontend/src/services/vocabularyService.js\nconst API_URL='http://localhost:3001/api';class VocabularyService{constructor(){this.token=localStorage.getItem('token');}async addVocabularyWord(wordData){try{const response=await fetch(`${API_URL}/vocabulary`,{method:'POST',headers:{'Content-Type':'application/json','Authorization':`Bearer ${this.token}`},body:JSON.stringify(wordData)});if(!response.ok){throw new Error('Failed to add vocabulary word');}return await response.json();}catch(error){console.error('Error adding vocabulary word:',error);throw error;}}async getBookVocabulary(bookId){try{const response=await fetch(`${API_URL}/vocabulary/book/${bookId}`,{headers:{'Authorization':`Bearer ${this.token}`}});if(!response.ok){throw new Error('Failed to fetch vocabulary');}return await response.json();}catch(error){console.error('Error fetching vocabulary:',error);throw error;}}async updateVocabularyWord(id,updateData){try{const response=await fetch(`${API_URL}/vocabulary/${id}`,{method:'PUT',headers:{'Content-Type':'application/json','Authorization':`Bearer ${this.token}`},body:JSON.stringify(updateData)});if(!response.ok){throw new Error('Failed to update vocabulary word');}return await response.json();}catch(error){console.error('Error updating vocabulary word:',error);throw error;}}async deleteVocabularyWord(id){try{const response=await fetch(`${API_URL}/vocabulary/${id}`,{method:'DELETE',headers:{'Authorization':`Bearer ${this.token}`}});if(!response.ok){throw new Error('Failed to delete vocabulary word');}return await response.json();}catch(error){console.error('Error deleting vocabulary word:',error);throw error;}}}export default new VocabularyService();","map":{"version":3,"names":["API_URL","VocabularyService","constructor","token","localStorage","getItem","addVocabularyWord","wordData","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","error","console","getBookVocabulary","bookId","updateVocabularyWord","id","updateData","deleteVocabularyWord"],"sources":["/Users/BrooksCole/Documents/reading-community/frontend/src/services/vocabularyService.js"],"sourcesContent":["// frontend/src/services/vocabularyService.js\n\nconst API_URL = 'http://localhost:3001/api';\n\nclass VocabularyService {\n  constructor() {\n    this.token = localStorage.getItem('token');\n  }\n\n  async addVocabularyWord(wordData) {\n    try {\n      const response = await fetch(`${API_URL}/vocabulary`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.token}`\n        },\n        body: JSON.stringify(wordData)\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to add vocabulary word');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error adding vocabulary word:', error);\n      throw error;\n    }\n  }\n\n  async getBookVocabulary(bookId) {\n    try {\n      const response = await fetch(`${API_URL}/vocabulary/book/${bookId}`, {\n        headers: {\n          'Authorization': `Bearer ${this.token}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch vocabulary');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching vocabulary:', error);\n      throw error;\n    }\n  }\n\n  async updateVocabularyWord(id, updateData) {\n    try {\n      const response = await fetch(`${API_URL}/vocabulary/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.token}`\n        },\n        body: JSON.stringify(updateData)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update vocabulary word');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error updating vocabulary word:', error);\n      throw error;\n    }\n  }\n\n  async deleteVocabularyWord(id) {\n    try {\n      const response = await fetch(`${API_URL}/vocabulary/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${this.token}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to delete vocabulary word');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error deleting vocabulary word:', error);\n      throw error;\n    }\n  }\n}\n\nexport default new VocabularyService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}