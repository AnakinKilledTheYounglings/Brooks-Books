{"ast":null,"code":"// src/utils/wordProcessing.js\n\nimport { etymologyService } from '../services/etymologyService';\nimport { translateWord } from '../services/translationService'; // Add this import\n\nconst DICTIONARY_API_URL = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\nexport const getWordDetails = async word => {\n  console.log('Starting word lookup for:', word);\n  try {\n    // Step 1: Get dictionary data\n    console.log('Fetching dictionary data...');\n    const dictResponse = await fetch(`${DICTIONARY_API_URL}${word}`);\n    if (!dictResponse.ok) {\n      console.error('Dictionary API error:', dictResponse.status);\n      throw new Error('Failed to fetch from dictionary API');\n    }\n    const dictData = await dictResponse.json();\n    console.log('Dictionary data received:', dictData);\n\n    // Step 2: Get etymology analysis\n    console.log('Getting etymology analysis...');\n    const etymologyData = analyzeWord(word);\n    console.log('Etymology data:', etymologyData);\n\n    // Step 3: Get translations in all supported languages\n    console.log('Getting translations...');\n    try {\n      const translations = await Promise.all([translateWord(word, 'es'), translateWord(word, 'fr'), translateWord(word, 'pt'), translateWord(word, 'it'), translateWord(word, 'hi'), translateWord(word, 'zh')]);\n      console.log('Translations received:', translations);\n\n      // Combine all data\n      const wordData = {\n        word,\n        definitions: extractDefinitions(dictData),\n        partOfSpeech: extractPartOfSpeech(dictData),\n        phonetics: extractPhonetics(dictData),\n        etymology: etymologyData,\n        translations: {\n          es: translations[0],\n          fr: translations[1],\n          pt: translations[2],\n          it: translations[3],\n          hi: translations[4],\n          zh: translations[5]\n        }\n      };\n      console.log('Final word data:', wordData);\n      return wordData;\n    } catch (translationError) {\n      console.error('Translation error:', translationError);\n      // Continue with partial data if translation fails\n      return {\n        word,\n        definitions: extractDefinitions(dictData),\n        partOfSpeech: extractPartOfSpeech(dictData),\n        phonetics: extractPhonetics(dictData),\n        etymology: etymologyData,\n        translations: {\n          es: null,\n          fr: null,\n          pt: null,\n          it: null,\n          hi: null,\n          zh: null\n        }\n      };\n    }\n  } catch (error) {\n    console.error('Error in getWordDetails:', error);\n    // Return basic word data structure even if main request fails\n    return {\n      word,\n      definitions: [],\n      partOfSpeech: [],\n      phonetics: null,\n      etymology: analyzeWord(word),\n      translations: {\n        es: null,\n        fr: null,\n        pt: null,\n        it: null,\n        hi: null,\n        zh: null\n      }\n    };\n  }\n};\n\n// Helper functions to extract dictionary data\nconst extractDefinitions = dictData => {\n  var _dictData$, _dictData$$meanings;\n  if (!Array.isArray(dictData)) return [];\n  return ((_dictData$ = dictData[0]) === null || _dictData$ === void 0 ? void 0 : (_dictData$$meanings = _dictData$.meanings) === null || _dictData$$meanings === void 0 ? void 0 : _dictData$$meanings.flatMap(meaning => meaning.definitions.map(def => ({\n    definition: def.definition,\n    example: def.example,\n    partOfSpeech: meaning.partOfSpeech\n  })))) || [];\n};\nconst extractPartOfSpeech = dictData => {\n  var _dictData$2, _dictData$2$meanings;\n  if (!Array.isArray(dictData)) return [];\n  return [...new Set((_dictData$2 = dictData[0]) === null || _dictData$2 === void 0 ? void 0 : (_dictData$2$meanings = _dictData$2.meanings) === null || _dictData$2$meanings === void 0 ? void 0 : _dictData$2$meanings.map(meaning => meaning.partOfSpeech))] || [];\n};\nconst extractPhonetics = dictData => {\n  var _dictData$3, _dictData$3$phonetics;\n  if (!Array.isArray(dictData)) return null;\n  const phoneticData = (_dictData$3 = dictData[0]) === null || _dictData$3 === void 0 ? void 0 : (_dictData$3$phonetics = _dictData$3.phonetics) === null || _dictData$3$phonetics === void 0 ? void 0 : _dictData$3$phonetics[0];\n  return phoneticData ? {\n    text: phoneticData.text,\n    audio: phoneticData.audio\n  } : null;\n};","map":{"version":3,"names":["etymologyService","translateWord","DICTIONARY_API_URL","getWordDetails","word","console","log","dictResponse","fetch","ok","error","status","Error","dictData","json","etymologyData","analyzeWord","translations","Promise","all","wordData","definitions","extractDefinitions","partOfSpeech","extractPartOfSpeech","phonetics","extractPhonetics","etymology","es","fr","pt","it","hi","zh","translationError","_dictData$","_dictData$$meanings","Array","isArray","meanings","flatMap","meaning","map","def","definition","example","_dictData$2","_dictData$2$meanings","Set","_dictData$3","_dictData$3$phonetics","phoneticData","text","audio"],"sources":["/Users/BrooksCole/Documents/reading-community/frontend/src/utils/wordProcessing.js"],"sourcesContent":["// src/utils/wordProcessing.js\n\nimport { etymologyService } from '../services/etymologyService';\n\nimport { translateWord } from '../services/translationService'; // Add this import\n\nconst DICTIONARY_API_URL = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\n\nexport const getWordDetails = async (word) => {\n  console.log('Starting word lookup for:', word);\n\n  try {\n    // Step 1: Get dictionary data\n    console.log('Fetching dictionary data...');\n    const dictResponse = await fetch(`${DICTIONARY_API_URL}${word}`);\n    \n    if (!dictResponse.ok) {\n      console.error('Dictionary API error:', dictResponse.status);\n      throw new Error('Failed to fetch from dictionary API');\n    }\n    \n    const dictData = await dictResponse.json();\n    console.log('Dictionary data received:', dictData);\n\n    // Step 2: Get etymology analysis\n    console.log('Getting etymology analysis...');\n    const etymologyData = analyzeWord(word);\n    console.log('Etymology data:', etymologyData);\n\n    // Step 3: Get translations in all supported languages\n    console.log('Getting translations...');\n    try {\n      const translations = await Promise.all([\n        translateWord(word, 'es'),\n        translateWord(word, 'fr'),\n        translateWord(word, 'pt'),\n        translateWord(word, 'it'),\n        translateWord(word, 'hi'),\n        translateWord(word, 'zh')\n      ]);\n      console.log('Translations received:', translations);\n\n      // Combine all data\n      const wordData = {\n        word,\n        definitions: extractDefinitions(dictData),\n        partOfSpeech: extractPartOfSpeech(dictData),\n        phonetics: extractPhonetics(dictData),\n        etymology: etymologyData,\n        translations: {\n          es: translations[0],\n          fr: translations[1],\n          pt: translations[2],\n          it: translations[3],\n          hi: translations[4],\n          zh: translations[5]\n        }\n      };\n\n      console.log('Final word data:', wordData);\n      return wordData;\n    } catch (translationError) {\n      console.error('Translation error:', translationError);\n      // Continue with partial data if translation fails\n      return {\n        word,\n        definitions: extractDefinitions(dictData),\n        partOfSpeech: extractPartOfSpeech(dictData),\n        phonetics: extractPhonetics(dictData),\n        etymology: etymologyData,\n        translations: {\n          es: null,\n          fr: null,\n          pt: null,\n          it: null,\n          hi: null,\n          zh: null\n        }\n      };\n    }\n\n  } catch (error) {\n    console.error('Error in getWordDetails:', error);\n    // Return basic word data structure even if main request fails\n    return {\n      word,\n      definitions: [],\n      partOfSpeech: [],\n      phonetics: null,\n      etymology: analyzeWord(word),\n      translations: {\n        es: null,\n        fr: null,\n        pt: null,\n        it: null,\n        hi: null,\n        zh: null\n      }\n    };\n  }\n};\n\n// Helper functions to extract dictionary data\nconst extractDefinitions = (dictData) => {\n  if (!Array.isArray(dictData)) return [];\n  \n  return dictData[0]?.meanings?.flatMap(meaning => \n    meaning.definitions.map(def => ({\n      definition: def.definition,\n      example: def.example,\n      partOfSpeech: meaning.partOfSpeech\n    }))\n  ) || [];\n};\n\nconst extractPartOfSpeech = (dictData) => {\n  if (!Array.isArray(dictData)) return [];\n  \n  return [...new Set(\n    dictData[0]?.meanings?.map(meaning => meaning.partOfSpeech)\n  )] || [];\n};\n\nconst extractPhonetics = (dictData) => {\n  if (!Array.isArray(dictData)) return null;\n  \n  const phoneticData = dictData[0]?.phonetics?.[0];\n  return phoneticData ? {\n    text: phoneticData.text,\n    audio: phoneticData.audio\n  } : null;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}