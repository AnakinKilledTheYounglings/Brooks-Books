{"ast":null,"code":"// frontend/src/services/vocabularyService.js\nconst API_URL = 'http://localhost:3001/api';\nconst vocabularyServiceInstance = new VocabularyService();\nclass VocabularyService {\n  constructor() {\n    this.token = localStorage.getItem('token');\n  }\n  async getQuizForBook(bookId) {\n    try {\n      const response = await fetch(`${API_URL}/quiz/book/${bookId}`, {\n        headers: {\n          'Authorization': `Bearer ${this.token}`\n        }\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to fetch quiz');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching quiz:', error);\n      throw error;\n    }\n  }\n  async addVocabularyWord(wordData) {\n    try {\n      const token = localStorage.getItem('token');\n      const userId = localStorage.getItem('userId');\n      if (!userId) {\n        throw new Error('User ID not found. Please log in again.');\n      }\n      const response = await fetch(`${API_URL}/vocabulary`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          ...wordData,\n          createdBy: userId\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to add vocabulary word');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error adding vocabulary word:', error);\n      throw error;\n    }\n  }\n  async getBookVocabulary(bookId) {\n    try {\n      const response = await fetch(`${API_URL}/vocabulary/book/${bookId}`, {\n        headers: {\n          'Authorization': `Bearer ${this.token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch vocabulary');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching vocabulary:', error);\n      throw error;\n    }\n  }\n  async updateVocabularyWord(id, updateData) {\n    try {\n      const response = await fetch(`${API_URL}/vocabulary/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.token}`\n        },\n        body: JSON.stringify(updateData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update vocabulary word');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error updating vocabulary word:', error);\n      throw error;\n    }\n  }\n  async deleteVocabularyWord(id) {\n    try {\n      const response = await fetch(`${API_URL}/vocabulary/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${this.token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete vocabulary word');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error deleting vocabulary word:', error);\n      throw error;\n    }\n  }\n}\n\n//export default VocabularyService();\nexport default VocabularyServiceInstance();","map":{"version":3,"names":["API_URL","vocabularyServiceInstance","VocabularyService","constructor","token","localStorage","getItem","getQuizForBook","bookId","response","fetch","headers","ok","error","json","Error","message","console","addVocabularyWord","wordData","userId","method","body","JSON","stringify","createdBy","errorData","getBookVocabulary","updateVocabularyWord","id","updateData","deleteVocabularyWord","VocabularyServiceInstance"],"sources":["/Users/BrooksCole/Documents/reading-community/frontend/src/services/vocabularyService.js"],"sourcesContent":["// frontend/src/services/vocabularyService.js\nconst API_URL = 'http://localhost:3001/api';\n\nconst vocabularyServiceInstance = new VocabularyService();\n\nclass VocabularyService {\n  constructor() {\n    this.token = localStorage.getItem('token');\n  }\n\n  async getQuizForBook(bookId) {\n      try {\n        const response = await fetch(`${API_URL}/quiz/book/${bookId}`, {\n          headers: {\n            'Authorization': `Bearer ${this.token}`\n          }\n        });\n  \n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.message || 'Failed to fetch quiz');\n        }\n  \n        return await response.json();\n      } catch (error) {\n        console.error('Error fetching quiz:', error);\n        throw error;\n      }\n    }\n\n  async addVocabularyWord(wordData) {\n    try {\n      const token = localStorage.getItem('token');\n      const userId = localStorage.getItem('userId');\n      \n      if (!userId) {\n        throw new Error('User ID not found. Please log in again.');\n      }\n\n      const response = await fetch(`${API_URL}/vocabulary`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          ...wordData,\n          createdBy: userId\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to add vocabulary word');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error adding vocabulary word:', error);\n      throw error;\n    }\n  }\n\n  async getBookVocabulary(bookId) {\n    try {\n      const response = await fetch(`${API_URL}/vocabulary/book/${bookId}`, {\n        headers: {\n          'Authorization': `Bearer ${this.token}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch vocabulary');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching vocabulary:', error);\n      throw error;\n    }\n  }\n\n  async updateVocabularyWord(id, updateData) {\n    try {\n      const response = await fetch(`${API_URL}/vocabulary/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.token}`\n        },\n        body: JSON.stringify(updateData)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update vocabulary word');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error updating vocabulary word:', error);\n      throw error;\n    }\n  }\n\n  async deleteVocabularyWord(id) {\n    try {\n      const response = await fetch(`${API_URL}/vocabulary/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${this.token}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to delete vocabulary word');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error deleting vocabulary word:', error);\n      throw error;\n    }\n  }\n}\n\n//export default VocabularyService();\nexport default VocabularyServiceInstance();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}