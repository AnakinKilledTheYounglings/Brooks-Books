{"ast":null,"code":"// frontend/src/services/localEtymologyData.js\n\nexport const LOCAL_ETYMOLOGY_DATA = {\n  pieRoots: {\n    '*bher-': {\n      meaning: 'to carry, bring',\n      descendants: {\n        latin: ['ferre', 'fertile', 'transfer'],\n        greek: ['pherein', 'phosphorus'],\n        germanic: ['bear', 'birth'],\n        sanskrit: ['bharati']\n      }\n    },\n    '*weid-': {\n      meaning: 'to see, to know',\n      descendants: {\n        latin: ['videre', 'vision', 'video'],\n        greek: ['idein', 'idea'],\n        germanic: ['wit', 'wise'],\n        sanskrit: ['veda']\n      }\n    },\n    '*ped-': {\n      meaning: 'foot',\n      descendants: {\n        latin: ['pes', 'pedal', 'pedestrian'],\n        greek: ['pous', 'podium'],\n        germanic: ['foot', 'fetch'],\n        sanskrit: ['pad']\n      }\n    },\n    '*gherd-': {\n      meaning: 'enclosure, yard',\n      descendants: {\n        latin: ['hortus', 'garden'],\n        greek: ['khortos'],\n        germanic: ['garden', 'yard'],\n        slavic: ['gorod']\n      }\n    }\n  },\n  historicalForms: {\n    'heart': {\n      'Proto-Germanic': '*hertō',\n      'West Germanic': '*herta',\n      'Old English': 'heorte',\n      'Middle English': 'herte',\n      'Early Modern English': 'heart',\n      'Modern English': 'heart'\n    },\n    'house': {\n      'Proto-Germanic': '*hūsą',\n      'West Germanic': '*hūs',\n      'Old English': 'hūs',\n      'Middle English': 'hous',\n      'Early Modern English': 'house',\n      'Modern English': 'house'\n    },\n    'water': {\n      'Proto-Germanic': '*watōr',\n      'West Germanic': '*water',\n      'Old English': 'wæter',\n      'Middle English': 'water',\n      'Early Modern English': 'water',\n      'Modern English': 'water'\n    }\n  },\n  soundChanges: {\n    'Proto-Germanic': {\n      description: \"Grimm's Law consonant shifts\",\n      examples: ['p > f', 't > þ', 'k > h', 'b > p', 'd > t', 'g > k']\n    },\n    'West Germanic': {\n      description: 'Loss of word-final -z',\n      examples: ['*dagaz > *dag']\n    },\n    'Old English': {\n      description: 'I-mutation and breaking of vowels',\n      examples: ['*mūs > mȳs', '*fallan > feallan']\n    }\n  },\n  modernCognates: {\n    'heart': {\n      'German': 'Herz',\n      'Dutch': 'hart',\n      'Swedish': 'hjärta',\n      'Danish': 'hjerte'\n    },\n    'house': {\n      'German': 'Haus',\n      'Dutch': 'huis',\n      'Swedish': 'hus',\n      'Danish': 'hus'\n    },\n    'water': {\n      'German': 'Wasser',\n      'Dutch': 'water',\n      'Swedish': 'vatten',\n      'Danish': 'vand'\n    }\n  },\n  semanticDevelopment: {\n    'nice': ['From Latin \"nescius\" (ignorant)', 'Old French \"nice\" (silly, simple)', 'Middle English (foolish)', 'Early Modern English (precise, careful)', 'Modern English (pleasant, agreeable)'],\n    'silly': ['Old English \"sælig\" (blessed, happy)', 'Middle English \"seely\" (innocent, weak)', 'Early Modern English (helpless, simple)', 'Modern English (foolish, absurd)']\n  },\n  findPIERoot(word) {\n    word = word.toLowerCase();\n    for (const [root, info] of Object.entries(this.pieRoots)) {\n      for (const descendants of Object.values(info.descendants)) {\n        if (descendants.some(desc => desc.toLowerCase() === word || word.includes(desc.toLowerCase()))) {\n          return {\n            root,\n            meaning: info.meaning,\n            descendants: info.descendants\n          };\n        }\n      }\n    }\n    return null;\n  },\n  getEvolution(word) {\n    word = word.toLowerCase();\n    if (this.historicalForms[word]) {\n      return Object.entries(this.historicalForms[word]).map(([period, form]) => {\n        var _this$soundChanges$pe;\n        return {\n          period,\n          form,\n          years: this.getYearsForPeriod(period),\n          changes: ((_this$soundChanges$pe = this.soundChanges[period]) === null || _this$soundChanges$pe === void 0 ? void 0 : _this$soundChanges$pe.description) || null\n        };\n      });\n    }\n    return null;\n  },\n  getCognates(word) {\n    return this.modernCognates[word.toLowerCase()] || null;\n  },\n  getSemanticDevelopment(word) {\n    return this.semanticDevelopment[word.toLowerCase()] || null;\n  },\n  getYearsForPeriod(period) {\n    const periods = {\n      'Proto-Germanic': '500 BCE-200 CE',\n      'West Germanic': '200-500 CE',\n      'Old English': '500-1100 CE',\n      'Middle English': '1100-1500 CE',\n      'Early Modern English': '1500-1800 CE',\n      'Modern English': '1800-present'\n    };\n    return periods[period] || '';\n  }\n};","map":{"version":3,"names":["LOCAL_ETYMOLOGY_DATA","pieRoots","meaning","descendants","latin","greek","germanic","sanskrit","slavic","historicalForms","soundChanges","description","examples","modernCognates","semanticDevelopment","findPIERoot","word","toLowerCase","root","info","Object","entries","values","some","desc","includes","getEvolution","map","period","form","_this$soundChanges$pe","years","getYearsForPeriod","changes","getCognates","getSemanticDevelopment","periods"],"sources":["/Users/BrooksCole/Documents/reading-community/frontend/src/services/localEtymologyData.js"],"sourcesContent":["// frontend/src/services/localEtymologyData.js\n\nexport const LOCAL_ETYMOLOGY_DATA = {\n  pieRoots: {\n    '*bher-': {\n      meaning: 'to carry, bring',\n      descendants: {\n        latin: ['ferre', 'fertile', 'transfer'],\n        greek: ['pherein', 'phosphorus'],\n        germanic: ['bear', 'birth'],\n        sanskrit: ['bharati']\n      }\n    },\n    '*weid-': {\n      meaning: 'to see, to know',\n      descendants: {\n        latin: ['videre', 'vision', 'video'],\n        greek: ['idein', 'idea'],\n        germanic: ['wit', 'wise'],\n        sanskrit: ['veda']\n      }\n    },\n    '*ped-': {\n      meaning: 'foot',\n      descendants: {\n        latin: ['pes', 'pedal', 'pedestrian'],\n        greek: ['pous', 'podium'],\n        germanic: ['foot', 'fetch'],\n        sanskrit: ['pad']\n      }\n    },\n    '*gherd-': {\n      meaning: 'enclosure, yard',\n      descendants: {\n        latin: ['hortus', 'garden'],\n        greek: ['khortos'],\n        germanic: ['garden', 'yard'],\n        slavic: ['gorod']\n      }\n    }\n  },\n\n  historicalForms: {\n    'heart': {\n      'Proto-Germanic': '*hertō',\n      'West Germanic': '*herta',\n      'Old English': 'heorte',\n      'Middle English': 'herte',\n      'Early Modern English': 'heart',\n      'Modern English': 'heart'\n    },\n    'house': {\n      'Proto-Germanic': '*hūsą',\n      'West Germanic': '*hūs',\n      'Old English': 'hūs',\n      'Middle English': 'hous',\n      'Early Modern English': 'house',\n      'Modern English': 'house'\n    },\n    'water': {\n      'Proto-Germanic': '*watōr',\n      'West Germanic': '*water',\n      'Old English': 'wæter',\n      'Middle English': 'water',\n      'Early Modern English': 'water',\n      'Modern English': 'water'\n    }\n  },\n\n  soundChanges: {\n    'Proto-Germanic': {\n      description: \"Grimm's Law consonant shifts\",\n      examples: [\n        'p > f',\n        't > þ',\n        'k > h',\n        'b > p',\n        'd > t',\n        'g > k'\n      ]\n    },\n    'West Germanic': {\n      description: 'Loss of word-final -z',\n      examples: ['*dagaz > *dag']\n    },\n    'Old English': {\n      description: 'I-mutation and breaking of vowels',\n      examples: ['*mūs > mȳs', '*fallan > feallan']\n    }\n  },\n\n  modernCognates: {\n    'heart': {\n      'German': 'Herz',\n      'Dutch': 'hart',\n      'Swedish': 'hjärta',\n      'Danish': 'hjerte'\n    },\n    'house': {\n      'German': 'Haus',\n      'Dutch': 'huis',\n      'Swedish': 'hus',\n      'Danish': 'hus'\n    },\n    'water': {\n      'German': 'Wasser',\n      'Dutch': 'water',\n      'Swedish': 'vatten',\n      'Danish': 'vand'\n    }\n  },\n\n  semanticDevelopment: {\n    'nice': [\n      'From Latin \"nescius\" (ignorant)',\n      'Old French \"nice\" (silly, simple)',\n      'Middle English (foolish)',\n      'Early Modern English (precise, careful)',\n      'Modern English (pleasant, agreeable)'\n    ],\n    'silly': [\n      'Old English \"sælig\" (blessed, happy)',\n      'Middle English \"seely\" (innocent, weak)',\n      'Early Modern English (helpless, simple)',\n      'Modern English (foolish, absurd)'\n    ]\n  },\n\n  findPIERoot(word) {\n    word = word.toLowerCase();\n    for (const [root, info] of Object.entries(this.pieRoots)) {\n      for (const descendants of Object.values(info.descendants)) {\n        if (descendants.some(desc => desc.toLowerCase() === word || word.includes(desc.toLowerCase()))) {\n          return {\n            root,\n            meaning: info.meaning,\n            descendants: info.descendants\n          };\n        }\n      }\n    }\n    return null;\n  },\n\n  getEvolution(word) {\n    word = word.toLowerCase();\n    if (this.historicalForms[word]) {\n      return Object.entries(this.historicalForms[word]).map(([period, form]) => ({\n        period,\n        form,\n        years: this.getYearsForPeriod(period),\n        changes: this.soundChanges[period]?.description || null\n      }));\n    }\n    return null;\n  },\n\n  getCognates(word) {\n    return this.modernCognates[word.toLowerCase()] || null;\n  },\n\n  getSemanticDevelopment(word) {\n    return this.semanticDevelopment[word.toLowerCase()] || null;\n  },\n\n  getYearsForPeriod(period) {\n    const periods = {\n      'Proto-Germanic': '500 BCE-200 CE',\n      'West Germanic': '200-500 CE',\n      'Old English': '500-1100 CE',\n      'Middle English': '1100-1500 CE',\n      'Early Modern English': '1500-1800 CE',\n      'Modern English': '1800-present'\n    };\n    return periods[period] || '';\n  }\n};"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,oBAAoB,GAAG;EAClCC,QAAQ,EAAE;IACR,QAAQ,EAAE;MACRC,OAAO,EAAE,iBAAiB;MAC1BC,WAAW,EAAE;QACXC,KAAK,EAAE,CAAC,OAAO,EAAE,SAAS,EAAE,UAAU,CAAC;QACvCC,KAAK,EAAE,CAAC,SAAS,EAAE,YAAY,CAAC;QAChCC,QAAQ,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC;QAC3BC,QAAQ,EAAE,CAAC,SAAS;MACtB;IACF,CAAC;IACD,QAAQ,EAAE;MACRL,OAAO,EAAE,iBAAiB;MAC1BC,WAAW,EAAE;QACXC,KAAK,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC;QACpCC,KAAK,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC;QACxBC,QAAQ,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC;QACzBC,QAAQ,EAAE,CAAC,MAAM;MACnB;IACF,CAAC;IACD,OAAO,EAAE;MACPL,OAAO,EAAE,MAAM;MACfC,WAAW,EAAE;QACXC,KAAK,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,YAAY,CAAC;QACrCC,KAAK,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC;QACzBC,QAAQ,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC;QAC3BC,QAAQ,EAAE,CAAC,KAAK;MAClB;IACF,CAAC;IACD,SAAS,EAAE;MACTL,OAAO,EAAE,iBAAiB;MAC1BC,WAAW,EAAE;QACXC,KAAK,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC;QAC3BC,KAAK,EAAE,CAAC,SAAS,CAAC;QAClBC,QAAQ,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC;QAC5BE,MAAM,EAAE,CAAC,OAAO;MAClB;IACF;EACF,CAAC;EAEDC,eAAe,EAAE;IACf,OAAO,EAAE;MACP,gBAAgB,EAAE,QAAQ;MAC1B,eAAe,EAAE,QAAQ;MACzB,aAAa,EAAE,QAAQ;MACvB,gBAAgB,EAAE,OAAO;MACzB,sBAAsB,EAAE,OAAO;MAC/B,gBAAgB,EAAE;IACpB,CAAC;IACD,OAAO,EAAE;MACP,gBAAgB,EAAE,OAAO;MACzB,eAAe,EAAE,MAAM;MACvB,aAAa,EAAE,KAAK;MACpB,gBAAgB,EAAE,MAAM;MACxB,sBAAsB,EAAE,OAAO;MAC/B,gBAAgB,EAAE;IACpB,CAAC;IACD,OAAO,EAAE;MACP,gBAAgB,EAAE,QAAQ;MAC1B,eAAe,EAAE,QAAQ;MACzB,aAAa,EAAE,OAAO;MACtB,gBAAgB,EAAE,OAAO;MACzB,sBAAsB,EAAE,OAAO;MAC/B,gBAAgB,EAAE;IACpB;EACF,CAAC;EAEDC,YAAY,EAAE;IACZ,gBAAgB,EAAE;MAChBC,WAAW,EAAE,8BAA8B;MAC3CC,QAAQ,EAAE,CACR,OAAO,EACP,OAAO,EACP,OAAO,EACP,OAAO,EACP,OAAO,EACP,OAAO;IAEX,CAAC;IACD,eAAe,EAAE;MACfD,WAAW,EAAE,uBAAuB;MACpCC,QAAQ,EAAE,CAAC,eAAe;IAC5B,CAAC;IACD,aAAa,EAAE;MACbD,WAAW,EAAE,mCAAmC;MAChDC,QAAQ,EAAE,CAAC,YAAY,EAAE,mBAAmB;IAC9C;EACF,CAAC;EAEDC,cAAc,EAAE;IACd,OAAO,EAAE;MACP,QAAQ,EAAE,MAAM;MAChB,OAAO,EAAE,MAAM;MACf,SAAS,EAAE,QAAQ;MACnB,QAAQ,EAAE;IACZ,CAAC;IACD,OAAO,EAAE;MACP,QAAQ,EAAE,MAAM;MAChB,OAAO,EAAE,MAAM;MACf,SAAS,EAAE,KAAK;MAChB,QAAQ,EAAE;IACZ,CAAC;IACD,OAAO,EAAE;MACP,QAAQ,EAAE,QAAQ;MAClB,OAAO,EAAE,OAAO;MAChB,SAAS,EAAE,QAAQ;MACnB,QAAQ,EAAE;IACZ;EACF,CAAC;EAEDC,mBAAmB,EAAE;IACnB,MAAM,EAAE,CACN,iCAAiC,EACjC,mCAAmC,EACnC,0BAA0B,EAC1B,yCAAyC,EACzC,sCAAsC,CACvC;IACD,OAAO,EAAE,CACP,sCAAsC,EACtC,yCAAyC,EACzC,yCAAyC,EACzC,kCAAkC;EAEtC,CAAC;EAEDC,WAAWA,CAACC,IAAI,EAAE;IAChBA,IAAI,GAAGA,IAAI,CAACC,WAAW,CAAC,CAAC;IACzB,KAAK,MAAM,CAACC,IAAI,EAAEC,IAAI,CAAC,IAAIC,MAAM,CAACC,OAAO,CAAC,IAAI,CAACpB,QAAQ,CAAC,EAAE;MACxD,KAAK,MAAME,WAAW,IAAIiB,MAAM,CAACE,MAAM,CAACH,IAAI,CAAChB,WAAW,CAAC,EAAE;QACzD,IAAIA,WAAW,CAACoB,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACP,WAAW,CAAC,CAAC,KAAKD,IAAI,IAAIA,IAAI,CAACS,QAAQ,CAACD,IAAI,CAACP,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;UAC9F,OAAO;YACLC,IAAI;YACJhB,OAAO,EAAEiB,IAAI,CAACjB,OAAO;YACrBC,WAAW,EAAEgB,IAAI,CAAChB;UACpB,CAAC;QACH;MACF;IACF;IACA,OAAO,IAAI;EACb,CAAC;EAEDuB,YAAYA,CAACV,IAAI,EAAE;IACjBA,IAAI,GAAGA,IAAI,CAACC,WAAW,CAAC,CAAC;IACzB,IAAI,IAAI,CAACR,eAAe,CAACO,IAAI,CAAC,EAAE;MAC9B,OAAOI,MAAM,CAACC,OAAO,CAAC,IAAI,CAACZ,eAAe,CAACO,IAAI,CAAC,CAAC,CAACW,GAAG,CAAC,CAAC,CAACC,MAAM,EAAEC,IAAI,CAAC;QAAA,IAAAC,qBAAA;QAAA,OAAM;UACzEF,MAAM;UACNC,IAAI;UACJE,KAAK,EAAE,IAAI,CAACC,iBAAiB,CAACJ,MAAM,CAAC;UACrCK,OAAO,EAAE,EAAAH,qBAAA,OAAI,CAACpB,YAAY,CAACkB,MAAM,CAAC,cAAAE,qBAAA,uBAAzBA,qBAAA,CAA2BnB,WAAW,KAAI;QACrD,CAAC;MAAA,CAAC,CAAC;IACL;IACA,OAAO,IAAI;EACb,CAAC;EAEDuB,WAAWA,CAAClB,IAAI,EAAE;IAChB,OAAO,IAAI,CAACH,cAAc,CAACG,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,IAAI,IAAI;EACxD,CAAC;EAEDkB,sBAAsBA,CAACnB,IAAI,EAAE;IAC3B,OAAO,IAAI,CAACF,mBAAmB,CAACE,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,IAAI,IAAI;EAC7D,CAAC;EAEDe,iBAAiBA,CAACJ,MAAM,EAAE;IACxB,MAAMQ,OAAO,GAAG;MACd,gBAAgB,EAAE,gBAAgB;MAClC,eAAe,EAAE,YAAY;MAC7B,aAAa,EAAE,aAAa;MAC5B,gBAAgB,EAAE,cAAc;MAChC,sBAAsB,EAAE,cAAc;MACtC,gBAAgB,EAAE;IACpB,CAAC;IACD,OAAOA,OAAO,CAACR,MAAM,CAAC,IAAI,EAAE;EAC9B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}