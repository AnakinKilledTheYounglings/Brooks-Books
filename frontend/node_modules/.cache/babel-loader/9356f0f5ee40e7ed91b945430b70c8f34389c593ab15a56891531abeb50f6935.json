{"ast":null,"code":"var _jsxFileName = \"/Users/BrooksCole/Documents/reading-community/frontend/src/components/BookGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { ForceGraph2D } from 'react-force-graph';\nimport { Box, Paper, Typography, Card, CardContent, IconButton, Tooltip } from '@mui/material';\nimport { Book, Person, LocalOffer, Category } from '@mui/icons-material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NODE_TYPES = {\n  BOOK: 'book',\n  AUTHOR: 'author',\n  GENRE: 'genre',\n  TAG: 'tag'\n};\nconst NODE_COLORS = {\n  [NODE_TYPES.BOOK]: '#4CAF50',\n  // Green\n  [NODE_TYPES.AUTHOR]: '#2196F3',\n  // Blue\n  [NODE_TYPES.GENRE]: '#FFC107',\n  // Amber\n  [NODE_TYPES.TAG]: '#9C27B0' // Purple\n};\nconst BookGraph = ({\n  graphData,\n  onNodeClick\n}) => {\n  _s();\n  const [highlightNodes, setHighlightNodes] = useState(new Set());\n  const [highlightLinks, setHighlightLinks] = useState(new Set());\n  const [selectedNode, setSelectedNode] = useState(null);\n  const getNodeColor = node => {\n    return NODE_COLORS[node.type] || '#999';\n  };\n  const handleNodeClick = node => {\n    setSelectedNode(node);\n    if (onNodeClick) {\n      onNodeClick(node);\n    }\n  };\n  const handleNodeHover = useCallback(node => {\n    setHighlightNodes(new Set(node ? [node] : []));\n    setHighlightLinks(new Set());\n\n    // If a node is hovered, highlight its direct connections\n    if (node) {\n      graphData.links.forEach(link => {\n        if (link.source === node || link.target === node) {\n          setHighlightLinks(prev => new Set([...prev, link]));\n          setHighlightNodes(prev => new Set([...prev, link.source, link.target]));\n        }\n      });\n    }\n  }, [graphData.links]);\n  const getNodeIcon = type => {\n    switch (type) {\n      case NODE_TYPES.BOOK:\n        return /*#__PURE__*/_jsxDEV(Book, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 16\n        }, this);\n      case NODE_TYPES.AUTHOR:\n        return /*#__PURE__*/_jsxDEV(Person, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 16\n        }, this);\n      case NODE_TYPES.GENRE:\n        return /*#__PURE__*/_jsxDEV(Category, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 16\n        }, this);\n      case NODE_TYPES.TAG:\n        return /*#__PURE__*/_jsxDEV(LocalOffer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 16\n        }, this);\n      default:\n        return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      position: 'relative',\n      height: '80vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ForceGraph2D, {\n      graphData: graphData,\n      nodeColor: node => getNodeColor(node),\n      nodeLabel: node => `${node.type}: ${node.name || node.title}`,\n      linkWidth: link => highlightLinks.has(link) ? 2 : 1,\n      linkColor: link => highlightLinks.has(link) ? '#ff0' : '#999',\n      nodeCanvasObject: (node, ctx, globalScale) => {\n        const label = node.name || node.title;\n        const fontSize = highlightNodes.has(node) ? 16 : 12;\n        ctx.font = `${fontSize}px Sans-Serif`;\n        ctx.fillStyle = highlightNodes.has(node) ? 'white' : getNodeColor(node);\n        ctx.beginPath();\n        ctx.arc(node.x, node.y, 6, 0, 2 * Math.PI);\n        ctx.fill();\n        if (globalScale >= 1) {\n          ctx.fillStyle = '#000';\n          ctx.textAlign = 'center';\n          ctx.fillText(label, node.x, node.y + 15);\n        }\n      },\n      onNodeClick: handleNodeClick,\n      onNodeHover: handleNodeHover,\n      cooldownTicks: 100,\n      linkDirectionalParticles: 2,\n      linkDirectionalParticleWidth: link => highlightLinks.has(link) ? 2 : 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        position: 'absolute',\n        top: 10,\n        right: 10,\n        p: 2,\n        backgroundColor: 'rgba(255, 255, 255, 0.9)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle2\",\n        gutterBottom: true,\n        children: \"Legend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), Object.entries(NODE_TYPES).map(([key, value]) => /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          mb: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            width: 12,\n            height: 12,\n            borderRadius: '50%',\n            backgroundColor: NODE_COLORS[value],\n            mr: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: key.toLowerCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        position: 'absolute',\n        bottom: 10,\n        left: 10,\n        maxWidth: 300,\n        backgroundColor: 'rgba(255, 255, 255, 0.9)'\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            mb: 1\n          },\n          children: [getNodeIcon(selectedNode.type), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            sx: {\n              ml: 1\n            },\n            children: selectedNode.name || selectedNode.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          children: [\"Type: \", selectedNode.type]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), selectedNode.description && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: selectedNode.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(BookGraph, \"xiTYR2/9FxatzLBxEP4gbF8JG04=\");\n_c = BookGraph;\nexport default BookGraph;\nvar _c;\n$RefreshReg$(_c, \"BookGraph\");","map":{"version":3,"names":["React","useState","useCallback","ForceGraph2D","Box","Paper","Typography","Card","CardContent","IconButton","Tooltip","Book","Person","LocalOffer","Category","jsxDEV","_jsxDEV","NODE_TYPES","BOOK","AUTHOR","GENRE","TAG","NODE_COLORS","BookGraph","graphData","onNodeClick","_s","highlightNodes","setHighlightNodes","Set","highlightLinks","setHighlightLinks","selectedNode","setSelectedNode","getNodeColor","node","type","handleNodeClick","handleNodeHover","links","forEach","link","source","target","prev","getNodeIcon","fileName","_jsxFileName","lineNumber","columnNumber","sx","position","height","children","nodeColor","nodeLabel","name","title","linkWidth","has","linkColor","nodeCanvasObject","ctx","globalScale","label","fontSize","font","fillStyle","beginPath","arc","x","y","Math","PI","fill","textAlign","fillText","onNodeHover","cooldownTicks","linkDirectionalParticles","linkDirectionalParticleWidth","top","right","p","backgroundColor","variant","gutterBottom","Object","entries","map","key","value","display","alignItems","mb","width","borderRadius","mr","toLowerCase","bottom","left","maxWidth","ml","color","description","_c","$RefreshReg$"],"sources":["/Users/BrooksCole/Documents/reading-community/frontend/src/components/BookGraph.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { ForceGraph2D } from 'react-force-graph';\nimport { \n  Box, \n  Paper, \n  Typography,\n  Card,\n  CardContent,\n  IconButton,\n  Tooltip\n} from '@mui/material';\nimport { Book, Person, LocalOffer, Category } from '@mui/icons-material';\n\nconst NODE_TYPES = {\n  BOOK: 'book',\n  AUTHOR: 'author',\n  GENRE: 'genre',\n  TAG: 'tag'\n};\n\nconst NODE_COLORS = {\n  [NODE_TYPES.BOOK]: '#4CAF50',    // Green\n  [NODE_TYPES.AUTHOR]: '#2196F3',  // Blue\n  [NODE_TYPES.GENRE]: '#FFC107',   // Amber\n  [NODE_TYPES.TAG]: '#9C27B0'      // Purple\n};\n\nconst BookGraph = ({ graphData, onNodeClick }) => {\n  const [highlightNodes, setHighlightNodes] = useState(new Set());\n  const [highlightLinks, setHighlightLinks] = useState(new Set());\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  const getNodeColor = (node) => {\n    return NODE_COLORS[node.type] || '#999';\n  };\n\n  const handleNodeClick = (node) => {\n    setSelectedNode(node);\n    if (onNodeClick) {\n      onNodeClick(node);\n    }\n  };\n\n  const handleNodeHover = useCallback((node) => {\n    setHighlightNodes(new Set(node ? [node] : []));\n    setHighlightLinks(new Set());\n\n    // If a node is hovered, highlight its direct connections\n    if (node) {\n      graphData.links.forEach(link => {\n        if (link.source === node || link.target === node) {\n          setHighlightLinks(prev => new Set([...prev, link]));\n          setHighlightNodes(prev => new Set([...prev, link.source, link.target]));\n        }\n      });\n    }\n  }, [graphData.links]);\n\n  const getNodeIcon = (type) => {\n    switch (type) {\n      case NODE_TYPES.BOOK:\n        return <Book />;\n      case NODE_TYPES.AUTHOR:\n        return <Person />;\n      case NODE_TYPES.GENRE:\n        return <Category />;\n      case NODE_TYPES.TAG:\n        return <LocalOffer />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Box sx={{ position: 'relative', height: '80vh' }}>\n      <ForceGraph2D\n        graphData={graphData}\n        nodeColor={node => getNodeColor(node)}\n        nodeLabel={node => `${node.type}: ${node.name || node.title}`}\n        linkWidth={link => highlightLinks.has(link) ? 2 : 1}\n        linkColor={link => highlightLinks.has(link) ? '#ff0' : '#999'}\n        nodeCanvasObject={(node, ctx, globalScale) => {\n          const label = node.name || node.title;\n          const fontSize = highlightNodes.has(node) ? 16 : 12;\n          ctx.font = `${fontSize}px Sans-Serif`;\n          ctx.fillStyle = highlightNodes.has(node) ? 'white' : getNodeColor(node);\n          ctx.beginPath();\n          ctx.arc(node.x, node.y, 6, 0, 2 * Math.PI);\n          ctx.fill();\n          \n          if (globalScale >= 1) {\n            ctx.fillStyle = '#000';\n            ctx.textAlign = 'center';\n            ctx.fillText(label, node.x, node.y + 15);\n          }\n        }}\n        onNodeClick={handleNodeClick}\n        onNodeHover={handleNodeHover}\n        cooldownTicks={100}\n        linkDirectionalParticles={2}\n        linkDirectionalParticleWidth={link => highlightLinks.has(link) ? 2 : 0}\n      />\n\n      {/* Legend */}\n      <Paper \n        sx={{ \n          position: 'absolute', \n          top: 10, \n          right: 10, \n          p: 2,\n          backgroundColor: 'rgba(255, 255, 255, 0.9)'\n        }}\n      >\n        <Typography variant=\"subtitle2\" gutterBottom>Legend</Typography>\n        {Object.entries(NODE_TYPES).map(([key, value]) => (\n          <Box key={key} sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n            <Box \n              sx={{ \n                width: 12, \n                height: 12, \n                borderRadius: '50%', \n                backgroundColor: NODE_COLORS[value],\n                mr: 1\n              }} \n            />\n            <Typography variant=\"body2\">{key.toLowerCase()}</Typography>\n          </Box>\n        ))}\n      </Paper>\n\n      {/* Selected Node Info */}\n      {selectedNode && (\n        <Card \n          sx={{ \n            position: 'absolute', \n            bottom: 10, \n            left: 10, \n            maxWidth: 300,\n            backgroundColor: 'rgba(255, 255, 255, 0.9)'\n          }}\n        >\n          <CardContent>\n            <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n              {getNodeIcon(selectedNode.type)}\n              <Typography variant=\"h6\" sx={{ ml: 1 }}>\n                {selectedNode.name || selectedNode.title}\n              </Typography>\n            </Box>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Type: {selectedNode.type}\n            </Typography>\n            {selectedNode.description && (\n              <Typography variant=\"body2\">\n                {selectedNode.description}\n              </Typography>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </Box>\n  );\n};\n\nexport default BookGraph;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}