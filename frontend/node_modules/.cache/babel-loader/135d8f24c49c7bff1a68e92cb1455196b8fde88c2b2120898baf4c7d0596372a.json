{"ast":null,"code":"// frontend/src/services/vocabularyService.js\nconst API_URL='http://localhost:3001/api';class VocabularyService{constructor(){this.token=localStorage.getItem('token');}async getQuizForBook(bookId){try{const response=await fetch(`${API_URL}/quiz/book/${bookId}`,{headers:{'Authorization':`Bearer ${this.token}`}});if(!response.ok){const error=await response.json();throw new Error(error.message||'Failed to fetch quiz');}return await response.json();}catch(error){console.error('Error fetching quiz:',error);throw error;}}async addVocabularyWord(wordData){try{const token=localStorage.getItem('token');const userId=localStorage.getItem('userId');if(!userId){throw new Error('User ID not found. Please log in again.');}const response=await fetch(`${API_URL}/vocabulary`,{method:'POST',headers:{'Content-Type':'application/json','Authorization':`Bearer ${token}`},body:JSON.stringify({...wordData,createdBy:userId})});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||'Failed to add vocabulary word');}return await response.json();}catch(error){console.error('Error adding vocabulary word:',error);throw error;}}async getBookVocabulary(bookId){try{const response=await fetch(`${API_URL}/vocabulary/book/${bookId}`,{headers:{'Authorization':`Bearer ${this.token}`}});if(!response.ok){throw new Error('Failed to fetch vocabulary');}return await response.json();}catch(error){console.error('Error fetching vocabulary:',error);throw error;}}async updateVocabularyWord(id,updateData){try{const response=await fetch(`${API_URL}/vocabulary/${id}`,{method:'PUT',headers:{'Content-Type':'application/json','Authorization':`Bearer ${this.token}`},body:JSON.stringify(updateData)});if(!response.ok){throw new Error('Failed to update vocabulary word');}return await response.json();}catch(error){console.error('Error updating vocabulary word:',error);throw error;}}async deleteVocabularyWord(id){try{const response=await fetch(`${API_URL}/vocabulary/${id}`,{method:'DELETE',headers:{'Authorization':`Bearer ${this.token}`}});if(!response.ok){throw new Error('Failed to delete vocabulary word');}return await response.json();}catch(error){console.error('Error deleting vocabulary word:',error);throw error;}}}const vocabularyServiceInstance=new VocabularyService();export default vocabularyServiceInstance;","map":{"version":3,"names":["API_URL","VocabularyService","constructor","token","localStorage","getItem","getQuizForBook","bookId","response","fetch","headers","ok","error","json","Error","message","console","addVocabularyWord","wordData","userId","method","body","JSON","stringify","createdBy","errorData","getBookVocabulary","updateVocabularyWord","id","updateData","deleteVocabularyWord","vocabularyServiceInstance"],"sources":["/Users/BrooksCole/Documents/reading-community/frontend/src/services/vocabularyService.js"],"sourcesContent":["// frontend/src/services/vocabularyService.js\nconst API_URL = 'http://localhost:3001/api';\n\n\nclass VocabularyService {\n  constructor() {\n    this.token = localStorage.getItem('token');\n  }\n\n  async getQuizForBook(bookId) {\n      try {\n        const response = await fetch(`${API_URL}/quiz/book/${bookId}`, {\n          headers: {\n            'Authorization': `Bearer ${this.token}`\n          }\n        });\n  \n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.message || 'Failed to fetch quiz');\n        }\n  \n        return await response.json();\n      } catch (error) {\n        console.error('Error fetching quiz:', error);\n        throw error;\n      }\n    }\n\n  async addVocabularyWord(wordData) {\n    try {\n      const token = localStorage.getItem('token');\n      const userId = localStorage.getItem('userId');\n      \n      if (!userId) {\n        throw new Error('User ID not found. Please log in again.');\n      }\n\n      const response = await fetch(`${API_URL}/vocabulary`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          ...wordData,\n          createdBy: userId\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to add vocabulary word');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error adding vocabulary word:', error);\n      throw error;\n    }\n  }\n\n  async getBookVocabulary(bookId) {\n    try {\n      const response = await fetch(`${API_URL}/vocabulary/book/${bookId}`, {\n        headers: {\n          'Authorization': `Bearer ${this.token}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch vocabulary');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching vocabulary:', error);\n      throw error;\n    }\n  }\n\n  async updateVocabularyWord(id, updateData) {\n    try {\n      const response = await fetch(`${API_URL}/vocabulary/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.token}`\n        },\n        body: JSON.stringify(updateData)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update vocabulary word');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error updating vocabulary word:', error);\n      throw error;\n    }\n  }\n\n  async deleteVocabularyWord(id) {\n    try {\n      const response = await fetch(`${API_URL}/vocabulary/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${this.token}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to delete vocabulary word');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error deleting vocabulary word:', error);\n      throw error;\n    }\n  }\n}\n\nconst vocabularyServiceInstance = new VocabularyService();\nexport default vocabularyServiceInstance;"],"mappings":"AAAA;AACA,KAAM,CAAAA,OAAO,CAAG,2BAA2B,CAG3C,KAAM,CAAAC,iBAAkB,CACtBC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAC5C,CAEA,KAAM,CAAAC,cAAcA,CAACC,MAAM,CAAE,CACzB,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGT,OAAO,cAAcO,MAAM,EAAE,CAAE,CAC7DG,OAAO,CAAE,CACP,eAAe,CAAE,UAAU,IAAI,CAACP,KAAK,EACvC,CACF,CAAC,CAAC,CAEF,GAAI,CAACK,QAAQ,CAACG,EAAE,CAAE,CAChB,KAAM,CAAAC,KAAK,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CACnC,KAAM,IAAI,CAAAC,KAAK,CAACF,KAAK,CAACG,OAAO,EAAI,sBAAsB,CAAC,CAC1D,CAEA,MAAO,MAAM,CAAAP,QAAQ,CAACK,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOD,KAAK,CAAE,CACdI,OAAO,CAACJ,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,KAAM,CAAAA,KAAK,CACb,CACF,CAEF,KAAM,CAAAK,iBAAiBA,CAACC,QAAQ,CAAE,CAChC,GAAI,CACF,KAAM,CAAAf,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAC3C,KAAM,CAAAc,MAAM,CAAGf,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAE7C,GAAI,CAACc,MAAM,CAAE,CACX,KAAM,IAAI,CAAAL,KAAK,CAAC,yCAAyC,CAAC,CAC5D,CAEA,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGT,OAAO,aAAa,CAAE,CACpDoB,MAAM,CAAE,MAAM,CACdV,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,eAAe,CAAE,UAAUP,KAAK,EAClC,CAAC,CACDkB,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnB,GAAGL,QAAQ,CACXM,SAAS,CAAEL,MACb,CAAC,CACH,CAAC,CAAC,CAEF,GAAI,CAACX,QAAQ,CAACG,EAAE,CAAE,CAChB,KAAM,CAAAc,SAAS,CAAG,KAAM,CAAAjB,QAAQ,CAACK,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAC,KAAK,CAACW,SAAS,CAACV,OAAO,EAAI,+BAA+B,CAAC,CACvE,CAEA,MAAO,MAAM,CAAAP,QAAQ,CAACK,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOD,KAAK,CAAE,CACdI,OAAO,CAACJ,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrD,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,KAAM,CAAAc,iBAAiBA,CAACnB,MAAM,CAAE,CAC9B,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGT,OAAO,oBAAoBO,MAAM,EAAE,CAAE,CACnEG,OAAO,CAAE,CACP,eAAe,CAAE,UAAU,IAAI,CAACP,KAAK,EACvC,CACF,CAAC,CAAC,CAEF,GAAI,CAACK,QAAQ,CAACG,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAG,KAAK,CAAC,4BAA4B,CAAC,CAC/C,CAEA,MAAO,MAAM,CAAAN,QAAQ,CAACK,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOD,KAAK,CAAE,CACdI,OAAO,CAACJ,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CAClD,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,KAAM,CAAAe,oBAAoBA,CAACC,EAAE,CAAEC,UAAU,CAAE,CACzC,GAAI,CACF,KAAM,CAAArB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGT,OAAO,eAAe4B,EAAE,EAAE,CAAE,CAC1DR,MAAM,CAAE,KAAK,CACbV,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,eAAe,CAAE,UAAU,IAAI,CAACP,KAAK,EACvC,CAAC,CACDkB,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACM,UAAU,CACjC,CAAC,CAAC,CAEF,GAAI,CAACrB,QAAQ,CAACG,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAG,KAAK,CAAC,kCAAkC,CAAC,CACrD,CAEA,MAAO,MAAM,CAAAN,QAAQ,CAACK,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOD,KAAK,CAAE,CACdI,OAAO,CAACJ,KAAK,CAAC,iCAAiC,CAAEA,KAAK,CAAC,CACvD,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,KAAM,CAAAkB,oBAAoBA,CAACF,EAAE,CAAE,CAC7B,GAAI,CACF,KAAM,CAAApB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGT,OAAO,eAAe4B,EAAE,EAAE,CAAE,CAC1DR,MAAM,CAAE,QAAQ,CAChBV,OAAO,CAAE,CACP,eAAe,CAAE,UAAU,IAAI,CAACP,KAAK,EACvC,CACF,CAAC,CAAC,CAEF,GAAI,CAACK,QAAQ,CAACG,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAG,KAAK,CAAC,kCAAkC,CAAC,CACrD,CAEA,MAAO,MAAM,CAAAN,QAAQ,CAACK,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOD,KAAK,CAAE,CACdI,OAAO,CAACJ,KAAK,CAAC,iCAAiC,CAAEA,KAAK,CAAC,CACvD,KAAM,CAAAA,KAAK,CACb,CACF,CACF,CAEA,KAAM,CAAAmB,yBAAyB,CAAG,GAAI,CAAA9B,iBAAiB,CAAC,CAAC,CACzD,cAAe,CAAA8B,yBAAyB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}