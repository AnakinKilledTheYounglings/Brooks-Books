{"ast":null,"code":"// frontend/src/services/etymologyService.js\n\nconst LATIN_ROOTS = {\n  'duc/duct': 'to lead',\n  'fac/fact': 'to make or do',\n  'mit/miss': 'to send',\n  'port': 'to carry',\n  'scrib/script': 'to write',\n  'spec/spect': 'to look',\n  'ten/tain': 'to hold',\n  'vid/vis': 'to see',\n  'voc/vok': 'to call',\n  'am': 'love',\n  'audi': 'to hear',\n  'bene': 'good, well',\n  'corp': 'body',\n  'dic/dict': 'to say',\n  'form': 'shape',\n  'geo': 'earth',\n  'graph': 'to write',\n  'log/logy': 'study of',\n  'multi': 'many',\n  'phil': 'love'\n};\nconst GREEK_ROOTS = {\n  'auto': 'self',\n  'bio': 'life',\n  'chron': 'time',\n  'demo': 'people',\n  'hydro': 'water',\n  'micro': 'small',\n  'phon': 'sound',\n  'photo': 'light',\n  'tele': 'distant',\n  'therm': 'heat'\n};\nconst COMMON_PREFIXES = {\n  'un': {\n    meaning: 'not',\n    origin: 'Old English'\n  },\n  're': {\n    meaning: 'again',\n    origin: 'Latin'\n  },\n  'dis': {\n    meaning: 'not, opposite of',\n    origin: 'Latin'\n  },\n  'pre': {\n    meaning: 'before',\n    origin: 'Latin'\n  },\n  'post': {\n    meaning: 'after',\n    origin: 'Latin'\n  },\n  'inter': {\n    meaning: 'between',\n    origin: 'Latin'\n  },\n  'super': {\n    meaning: 'above, beyond',\n    origin: 'Latin'\n  },\n  'sub': {\n    meaning: 'under',\n    origin: 'Latin'\n  },\n  'trans': {\n    meaning: 'across',\n    origin: 'Latin'\n  },\n  'anti': {\n    meaning: 'against',\n    origin: 'Greek'\n  }\n};\nconst COMMON_SUFFIXES = {\n  'able/ible': {\n    meaning: 'capable of being',\n    origin: 'Latin'\n  },\n  'tion/sion': {\n    meaning: 'state or quality',\n    origin: 'Latin'\n  },\n  'ment': {\n    meaning: 'state of',\n    origin: 'Latin'\n  },\n  'ness': {\n    meaning: 'state of being',\n    origin: 'Old English'\n  },\n  'ity': {\n    meaning: 'state or quality',\n    origin: 'Latin'\n  },\n  'ize': {\n    meaning: 'to make or become',\n    origin: 'Greek'\n  },\n  'ist': {\n    meaning: 'one who',\n    origin: 'Greek'\n  },\n  'ology': {\n    meaning: 'study of',\n    origin: 'Greek'\n  },\n  'phobia': {\n    meaning: 'fear of',\n    origin: 'Greek'\n  },\n  'ism': {\n    meaning: 'doctrine or belief',\n    origin: 'Greek'\n  }\n};\nconst findRootInWord = word => {\n  word = word.toLowerCase();\n\n  // Check Latin roots\n  for (const [root, meaning] of Object.entries(LATIN_ROOTS)) {\n    if (word.includes(root.split('/')[0])) {\n      return {\n        root,\n        meaning,\n        origin: 'Latin'\n      };\n    }\n  }\n\n  // Check Greek roots\n  for (const [root, meaning] of Object.entries(GREEK_ROOTS)) {\n    if (word.includes(root)) {\n      return {\n        root,\n        meaning,\n        origin: 'Greek'\n      };\n    }\n  }\n  return null;\n};\nconst findAffixes = word => {\n  word = word.toLowerCase();\n  const affixes = [];\n\n  // Check prefixes\n  for (const [prefix, info] of Object.entries(COMMON_PREFIXES)) {\n    if (word.startsWith(prefix)) {\n      affixes.push({\n        type: 'prefix',\n        affix: prefix,\n        ...info\n      });\n    }\n  }\n\n  // Check suffixes\n  for (const [suffix, info] of Object.entries(COMMON_SUFFIXES)) {\n    const suffixVariants = suffix.split('/');\n    if (suffixVariants.some(v => word.endsWith(v))) {\n      affixes.push({\n        type: 'suffix',\n        affix: suffix,\n        ...info\n      });\n    }\n  }\n  return affixes;\n};\nconst generateWordEvolution = (root, word) => {\n  const evolution = [];\n  if (root.origin === 'Latin') {\n    evolution.push({\n      period: 'Classical Latin',\n      form: root.root.split('/')[0] + 'us'\n    });\n    evolution.push({\n      period: 'Medieval Latin',\n      form: root.root.split('/')[0] + 'um'\n    });\n    evolution.push({\n      period: 'Old French',\n      form: word.slice(0, -1) + 'e'\n    });\n  } else if (root.origin === 'Greek') {\n    evolution.push({\n      period: 'Ancient Greek',\n      form: root.root + 'os'\n    });\n    evolution.push({\n      period: 'Medieval Greek',\n      form: root.root + 'us'\n    });\n  }\n  evolution.push({\n    period: 'Modern English',\n    form: word\n  });\n  return evolution;\n};\nconst analyzeWord = word => {\n  const root = findRootInWord(word);\n  const affixes = findAffixes(word);\n  let meaning = '';\n  let etymology = {};\n  if (root) {\n    meaning = root.meaning;\n    etymology = {\n      root: root.root,\n      originLanguage: root.origin,\n      meaning: root.meaning,\n      evolution: generateWordEvolution(root, word)\n    };\n\n    // Add affix information to meaning\n    affixes.forEach(affix => {\n      if (affix.type === 'prefix') {\n        meaning = `${affix.meaning} + ${meaning}`;\n      } else {\n        meaning = `${meaning} + ${affix.meaning}`;\n      }\n    });\n  } else {\n    // If no root found, use the first affix as the base\n    const primaryAffix = affixes[0];\n    if (primaryAffix) {\n      etymology = {\n        root: primaryAffix.affix,\n        originLanguage: primaryAffix.origin,\n        meaning: primaryAffix.meaning,\n        evolution: [{\n          period: 'Modern English',\n          form: word\n        }]\n      };\n    } else {\n      // Default case when no etymology information is found\n      etymology = {\n        root: word,\n        originLanguage: 'Unknown',\n        meaning: 'No known etymology',\n        evolution: [{\n          period: 'Modern English',\n          form: word\n        }]\n      };\n    }\n  }\n  return {\n    etymology,\n    affixes\n  };\n};\nexport default analyzeWord;","map":{"version":3,"names":["LATIN_ROOTS","GREEK_ROOTS","COMMON_PREFIXES","meaning","origin","COMMON_SUFFIXES","findRootInWord","word","toLowerCase","root","Object","entries","includes","split","findAffixes","affixes","prefix","info","startsWith","push","type","affix","suffix","suffixVariants","some","v","endsWith","generateWordEvolution","evolution","period","form","slice","analyzeWord","etymology","originLanguage","forEach","primaryAffix"],"sources":["/Users/BrooksCole/Documents/reading-community/frontend/src/services/etymologyService.js"],"sourcesContent":["// frontend/src/services/etymologyService.js\n\nconst LATIN_ROOTS = {\n  'duc/duct': 'to lead',\n  'fac/fact': 'to make or do',\n  'mit/miss': 'to send',\n  'port': 'to carry',\n  'scrib/script': 'to write',\n  'spec/spect': 'to look',\n  'ten/tain': 'to hold',\n  'vid/vis': 'to see',\n  'voc/vok': 'to call',\n  'am': 'love',\n  'audi': 'to hear',\n  'bene': 'good, well',\n  'corp': 'body',\n  'dic/dict': 'to say',\n  'form': 'shape',\n  'geo': 'earth',\n  'graph': 'to write',\n  'log/logy': 'study of',\n  'multi': 'many',\n  'phil': 'love'\n};\n\nconst GREEK_ROOTS = {\n  'auto': 'self',\n  'bio': 'life',\n  'chron': 'time',\n  'demo': 'people',\n  'hydro': 'water',\n  'micro': 'small',\n  'phon': 'sound',\n  'photo': 'light',\n  'tele': 'distant',\n  'therm': 'heat'\n};\n\nconst COMMON_PREFIXES = {\n  'un': { meaning: 'not', origin: 'Old English' },\n  're': { meaning: 'again', origin: 'Latin' },\n  'dis': { meaning: 'not, opposite of', origin: 'Latin' },\n  'pre': { meaning: 'before', origin: 'Latin' },\n  'post': { meaning: 'after', origin: 'Latin' },\n  'inter': { meaning: 'between', origin: 'Latin' },\n  'super': { meaning: 'above, beyond', origin: 'Latin' },\n  'sub': { meaning: 'under', origin: 'Latin' },\n  'trans': { meaning: 'across', origin: 'Latin' },\n  'anti': { meaning: 'against', origin: 'Greek' }\n};\n\nconst COMMON_SUFFIXES = {\n  'able/ible': { meaning: 'capable of being', origin: 'Latin' },\n  'tion/sion': { meaning: 'state or quality', origin: 'Latin' },\n  'ment': { meaning: 'state of', origin: 'Latin' },\n  'ness': { meaning: 'state of being', origin: 'Old English' },\n  'ity': { meaning: 'state or quality', origin: 'Latin' },\n  'ize': { meaning: 'to make or become', origin: 'Greek' },\n  'ist': { meaning: 'one who', origin: 'Greek' },\n  'ology': { meaning: 'study of', origin: 'Greek' },\n  'phobia': { meaning: 'fear of', origin: 'Greek' },\n  'ism': { meaning: 'doctrine or belief', origin: 'Greek' }\n};\n\nconst findRootInWord = (word) => {\n  word = word.toLowerCase();\n  \n  // Check Latin roots\n  for (const [root, meaning] of Object.entries(LATIN_ROOTS)) {\n    if (word.includes(root.split('/')[0])) {\n      return { root, meaning, origin: 'Latin' };\n    }\n  }\n  \n  // Check Greek roots\n  for (const [root, meaning] of Object.entries(GREEK_ROOTS)) {\n    if (word.includes(root)) {\n      return { root, meaning, origin: 'Greek' };\n    }\n  }\n  \n  return null;\n};\n\nconst findAffixes = (word) => {\n  word = word.toLowerCase();\n  const affixes = [];\n  \n  // Check prefixes\n  for (const [prefix, info] of Object.entries(COMMON_PREFIXES)) {\n    if (word.startsWith(prefix)) {\n      affixes.push({ \n        type: 'prefix', \n        affix: prefix, \n        ...info \n      });\n    }\n  }\n  \n  // Check suffixes\n  for (const [suffix, info] of Object.entries(COMMON_SUFFIXES)) {\n    const suffixVariants = suffix.split('/');\n    if (suffixVariants.some(v => word.endsWith(v))) {\n      affixes.push({ \n        type: 'suffix', \n        affix: suffix, \n        ...info \n      });\n    }\n  }\n  \n  return affixes;\n};\n\nconst generateWordEvolution = (root, word) => {\n  const evolution = [];\n  \n  if (root.origin === 'Latin') {\n    evolution.push({\n      period: 'Classical Latin',\n      form: root.root.split('/')[0] + 'us'\n    });\n    evolution.push({\n      period: 'Medieval Latin',\n      form: root.root.split('/')[0] + 'um'\n    });\n    evolution.push({\n      period: 'Old French',\n      form: word.slice(0, -1) + 'e'\n    });\n  } else if (root.origin === 'Greek') {\n    evolution.push({\n      period: 'Ancient Greek',\n      form: root.root + 'os'\n    });\n    evolution.push({\n      period: 'Medieval Greek',\n      form: root.root + 'us'\n    });\n  }\n  \n  evolution.push({\n    period: 'Modern English',\n    form: word\n  });\n  \n  return evolution;\n};\n\nconst analyzeWord = (word) => {\n  const root = findRootInWord(word);\n  const affixes = findAffixes(word);\n  let meaning = '';\n  let etymology = {};\n  \n  if (root) {\n    meaning = root.meaning;\n    etymology = {\n      root: root.root,\n      originLanguage: root.origin,\n      meaning: root.meaning,\n      evolution: generateWordEvolution(root, word)\n    };\n    \n    // Add affix information to meaning\n    affixes.forEach(affix => {\n      if (affix.type === 'prefix') {\n        meaning = `${affix.meaning} + ${meaning}`;\n      } else {\n        meaning = `${meaning} + ${affix.meaning}`;\n      }\n    });\n  } else {\n    // If no root found, use the first affix as the base\n    const primaryAffix = affixes[0];\n    if (primaryAffix) {\n      etymology = {\n        root: primaryAffix.affix,\n        originLanguage: primaryAffix.origin,\n        meaning: primaryAffix.meaning,\n        evolution: [{\n          period: 'Modern English',\n          form: word\n        }]\n      };\n    } else {\n      // Default case when no etymology information is found\n      etymology = {\n        root: word,\n        originLanguage: 'Unknown',\n        meaning: 'No known etymology',\n        evolution: [{\n          period: 'Modern English',\n          form: word\n        }]\n      };\n    }\n  }\n  \n  return {\n    etymology,\n    affixes\n  };\n};\n\nexport default analyzeWord;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}