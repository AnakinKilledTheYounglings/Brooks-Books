{"ast":null,"code":"// src/utils/wordProcessing.js\nimport{etymologyService}from'../services/etymologyService';import{translateWord}from'../services/translationService';// Add this import\nconst DICTIONARY_API_URL='https://api.dictionaryapi.dev/api/v2/entries/en/';export const getWordDetails=async word=>{console.log('Starting word lookup for:',word);try{// Step 1: Get dictionary data\nconsole.log('Fetching dictionary data...');const dictResponse=await fetch(`${DICTIONARY_API_URL}${word}`);if(!dictResponse.ok){console.error('Dictionary API error:',dictResponse.status);throw new Error('Failed to fetch from dictionary API');}const dictData=await dictResponse.json();console.log('Dictionary data received:',dictData);// Step 2: Get etymology analysis\nconsole.log('Getting etymology analysis...');const etymologyData=etymologyService.getLocalEtymology(word);console.log('Etymology data:',etymologyData);// Step 3: Get translations in all supported languages\nconsole.log('Getting translations...');try{const translations=await Promise.all([translateWord(word,'es'),translateWord(word,'fr'),translateWord(word,'pt'),translateWord(word,'it'),translateWord(word,'hi'),translateWord(word,'zh')]);console.log('Translations received:',translations);// Combine all data\nconst wordData={word,definitions:extractDefinitions(dictData),partOfSpeech:extractPartOfSpeech(dictData),phonetics:extractPhonetics(dictData),etymology:etymologyData,translations:{es:translations[0],fr:translations[1],pt:translations[2],it:translations[3],hi:translations[4],zh:translations[5]}};console.log('Final word data:',wordData);return wordData;}catch(translationError){console.error('Translation error:',translationError);// Continue with partial data if translation fails\nreturn{word,definitions:extractDefinitions(dictData),partOfSpeech:extractPartOfSpeech(dictData),phonetics:extractPhonetics(dictData),etymology:etymologyData,translations:{es:null,fr:null,pt:null,it:null,hi:null,zh:null}};}}catch(error){console.error('Error in getWordDetails:',error);// Return basic word data structure even if main request fails\nreturn{word,definitions:[],partOfSpeech:[],phonetics:null,etymology:etymologyService.getLocalEtymology(word),translations:{es:null,fr:null,pt:null,it:null,hi:null,zh:null}};}};// Helper functions to extract dictionary data\nconst extractDefinitions=dictData=>{var _dictData$,_dictData$$meanings;if(!Array.isArray(dictData))return[];return((_dictData$=dictData[0])===null||_dictData$===void 0?void 0:(_dictData$$meanings=_dictData$.meanings)===null||_dictData$$meanings===void 0?void 0:_dictData$$meanings.flatMap(meaning=>meaning.definitions.map(def=>({definition:def.definition,example:def.example,partOfSpeech:meaning.partOfSpeech}))))||[];};const extractPartOfSpeech=dictData=>{var _dictData$2,_dictData$2$meanings;if(!Array.isArray(dictData))return[];return[...new Set((_dictData$2=dictData[0])===null||_dictData$2===void 0?void 0:(_dictData$2$meanings=_dictData$2.meanings)===null||_dictData$2$meanings===void 0?void 0:_dictData$2$meanings.map(meaning=>meaning.partOfSpeech))]||[];};const extractPhonetics=dictData=>{var _dictData$3,_dictData$3$phonetics;if(!Array.isArray(dictData))return null;const phoneticData=(_dictData$3=dictData[0])===null||_dictData$3===void 0?void 0:(_dictData$3$phonetics=_dictData$3.phonetics)===null||_dictData$3$phonetics===void 0?void 0:_dictData$3$phonetics[0];return phoneticData?{text:phoneticData.text,audio:phoneticData.audio}:null;};","map":{"version":3,"names":["etymologyService","translateWord","DICTIONARY_API_URL","getWordDetails","word","console","log","dictResponse","fetch","ok","error","status","Error","dictData","json","etymologyData","getLocalEtymology","translations","Promise","all","wordData","definitions","extractDefinitions","partOfSpeech","extractPartOfSpeech","phonetics","extractPhonetics","etymology","es","fr","pt","it","hi","zh","translationError","_dictData$","_dictData$$meanings","Array","isArray","meanings","flatMap","meaning","map","def","definition","example","_dictData$2","_dictData$2$meanings","Set","_dictData$3","_dictData$3$phonetics","phoneticData","text","audio"],"sources":["/Users/BrooksCole/Documents/reading-community/frontend/src/utils/wordProcessing.js"],"sourcesContent":["// src/utils/wordProcessing.js\n\nimport { etymologyService } from '../services/etymologyService';\n\nimport { translateWord } from '../services/translationService'; // Add this import\n\nconst DICTIONARY_API_URL = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\n\nexport const getWordDetails = async (word) => {\n  console.log('Starting word lookup for:', word);\n\n  try {\n    // Step 1: Get dictionary data\n    console.log('Fetching dictionary data...');\n    const dictResponse = await fetch(`${DICTIONARY_API_URL}${word}`);\n    \n    if (!dictResponse.ok) {\n      console.error('Dictionary API error:', dictResponse.status);\n      throw new Error('Failed to fetch from dictionary API');\n    }\n    \n    const dictData = await dictResponse.json();\n    console.log('Dictionary data received:', dictData);\n\n    // Step 2: Get etymology analysis\n    console.log('Getting etymology analysis...');\n    const etymologyData = etymologyService.getLocalEtymology(word);\n    console.log('Etymology data:', etymologyData);\n\n    // Step 3: Get translations in all supported languages\n    console.log('Getting translations...');\n    try {\n      const translations = await Promise.all([\n        translateWord(word, 'es'),\n        translateWord(word, 'fr'),\n        translateWord(word, 'pt'),\n        translateWord(word, 'it'),\n        translateWord(word, 'hi'),\n        translateWord(word, 'zh')\n      ]);\n      console.log('Translations received:', translations);\n\n      // Combine all data\n      const wordData = {\n        word,\n        definitions: extractDefinitions(dictData),\n        partOfSpeech: extractPartOfSpeech(dictData),\n        phonetics: extractPhonetics(dictData),\n        etymology: etymologyData,\n        translations: {\n          es: translations[0],\n          fr: translations[1],\n          pt: translations[2],\n          it: translations[3],\n          hi: translations[4],\n          zh: translations[5]\n        }\n      };\n\n      console.log('Final word data:', wordData);\n      return wordData;\n    } catch (translationError) {\n      console.error('Translation error:', translationError);\n      // Continue with partial data if translation fails\n      return {\n        word,\n        definitions: extractDefinitions(dictData),\n        partOfSpeech: extractPartOfSpeech(dictData),\n        phonetics: extractPhonetics(dictData),\n        etymology: etymologyData,\n        translations: {\n          es: null,\n          fr: null,\n          pt: null,\n          it: null,\n          hi: null,\n          zh: null\n        }\n      };\n    }\n\n  } catch (error) {\n    console.error('Error in getWordDetails:', error);\n    // Return basic word data structure even if main request fails\n    return {\n      word,\n      definitions: [],\n      partOfSpeech: [],\n      phonetics: null,\n      etymology: etymologyService.getLocalEtymology(word),\n      translations: {\n        es: null,\n        fr: null,\n        pt: null,\n        it: null,\n        hi: null,\n        zh: null\n      }\n    };\n  }\n};\n\n// Helper functions to extract dictionary data\nconst extractDefinitions = (dictData) => {\n  if (!Array.isArray(dictData)) return [];\n  \n  return dictData[0]?.meanings?.flatMap(meaning => \n    meaning.definitions.map(def => ({\n      definition: def.definition,\n      example: def.example,\n      partOfSpeech: meaning.partOfSpeech\n    }))\n  ) || [];\n};\n\nconst extractPartOfSpeech = (dictData) => {\n  if (!Array.isArray(dictData)) return [];\n  \n  return [...new Set(\n    dictData[0]?.meanings?.map(meaning => meaning.partOfSpeech)\n  )] || [];\n};\n\nconst extractPhonetics = (dictData) => {\n  if (!Array.isArray(dictData)) return null;\n  \n  const phoneticData = dictData[0]?.phonetics?.[0];\n  return phoneticData ? {\n    text: phoneticData.text,\n    audio: phoneticData.audio\n  } : null;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}