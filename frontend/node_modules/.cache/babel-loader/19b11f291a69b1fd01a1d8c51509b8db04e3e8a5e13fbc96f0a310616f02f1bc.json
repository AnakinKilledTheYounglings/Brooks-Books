{"ast":null,"code":"// frontend/src/components/BulkUpload.js\nimport React,{useState}from'react';import{Box,Button,Typography,Alert,CircularProgress,Paper}from'@mui/material';import{CloudUpload}from'@mui/icons-material';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function BulkUpload(){const[uploading,setUploading]=useState(false);const[error,setError]=useState(null);const[success,setSuccess]=useState(false);const handleFileUpload=async event=>{const file=event.target.files[0];if(!file)return;// Check file type\nif(!file.name.endsWith('.xlsx')&&!file.name.endsWith('.xls')){setError('Please upload an Excel file (.xlsx or .xls)');return;}const formData=new FormData();formData.append('bookList',file);setUploading(true);setError(null);setSuccess(false);try{const response=await fetch('http://localhost:3001/api/books/bulk-upload',{method:'POST',headers:{'Authorization':`Bearer ${localStorage.getItem('token')}`},body:formData});const data=await response.json();if(!response.ok){throw new Error(data.error||'Failed to upload books');}setSuccess(true);event.target.value='';// Reset file input\n}catch(err){setError(err.message);}finally{setUploading(false);}};return/*#__PURE__*/_jsxs(Paper,{sx:{p:3,mb:3},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",gutterBottom:true,children:\"Bulk Upload Books\"}),/*#__PURE__*/_jsxs(Box,{sx:{my:2},children:[/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"text.secondary\",gutterBottom:true,children:\"Upload an Excel file containing book information. The file should include columns for: title, author, description, genres (comma-separated), and age range.\"}),/*#__PURE__*/_jsxs(Button,{variant:\"contained\",component:\"label\",startIcon:uploading?/*#__PURE__*/_jsx(CircularProgress,{size:20}):/*#__PURE__*/_jsx(CloudUpload,{}),disabled:uploading,sx:{mt:2},children:[\"Upload Excel File\",/*#__PURE__*/_jsx(\"input\",{type:\"file\",hidden:true,accept:\".xlsx,.xls\",onChange:handleFileUpload})]})]}),error&&/*#__PURE__*/_jsx(Alert,{severity:\"error\",sx:{mt:2},children:error}),success&&/*#__PURE__*/_jsx(Alert,{severity:\"success\",sx:{mt:2},children:\"Books uploaded successfully!\"})]});}export default BulkUpload;","map":{"version":3,"names":["React","useState","Box","Button","Typography","Alert","CircularProgress","Paper","CloudUpload","jsx","_jsx","jsxs","_jsxs","BulkUpload","uploading","setUploading","error","setError","success","setSuccess","handleFileUpload","event","file","target","files","name","endsWith","formData","FormData","append","response","fetch","method","headers","localStorage","getItem","body","data","json","ok","Error","value","err","message","sx","p","mb","children","variant","gutterBottom","my","color","component","startIcon","size","disabled","mt","type","hidden","accept","onChange","severity"],"sources":["/Users/BrooksCole/Documents/reading-community/frontend/src/components/BulkUpload.js"],"sourcesContent":["// frontend/src/components/BulkUpload.js\nimport React, { useState } from 'react';\nimport { \n  Box, \n  Button, \n  Typography, \n  Alert,\n  CircularProgress,\n  Paper \n} from '@mui/material';\nimport { CloudUpload } from '@mui/icons-material';\n\nfunction BulkUpload() {\n  const [uploading, setUploading] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(false);\n\n  const handleFileUpload = async (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    // Check file type\n    if (!file.name.endsWith('.xlsx') && !file.name.endsWith('.xls')) {\n      setError('Please upload an Excel file (.xlsx or .xls)');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('bookList', file);\n\n    setUploading(true);\n    setError(null);\n    setSuccess(false);\n\n    try {\n      const response = await fetch('http://localhost:3001/api/books/bulk-upload', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: formData\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to upload books');\n      }\n\n      setSuccess(true);\n      event.target.value = ''; // Reset file input\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  return (\n    <Paper sx={{ p: 3, mb: 3 }}>\n      <Typography variant=\"h6\" gutterBottom>\n        Bulk Upload Books\n      </Typography>\n      \n      <Box sx={{ my: 2 }}>\n        <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n          Upload an Excel file containing book information. The file should include columns for:\n          title, author, description, genres (comma-separated), and age range.\n        </Typography>\n        \n        <Button\n          variant=\"contained\"\n          component=\"label\"\n          startIcon={uploading ? <CircularProgress size={20} /> : <CloudUpload />}\n          disabled={uploading}\n          sx={{ mt: 2 }}\n        >\n          Upload Excel File\n          <input\n            type=\"file\"\n            hidden\n            accept=\".xlsx,.xls\"\n            onChange={handleFileUpload}\n          />\n        </Button>\n      </Box>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mt: 2 }}>\n          {error}\n        </Alert>\n      )}\n\n      {success && (\n        <Alert severity=\"success\" sx={{ mt: 2 }}>\n          Books uploaded successfully!\n        </Alert>\n      )}\n    </Paper>\n  );\n}\n\nexport default BulkUpload;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}