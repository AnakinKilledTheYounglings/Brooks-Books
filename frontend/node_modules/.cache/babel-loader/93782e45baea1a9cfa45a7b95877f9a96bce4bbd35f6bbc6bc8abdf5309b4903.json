{"ast":null,"code":"// frontend/src/services/etymologyService.js\n\n// Extended Latin roots\nconst LATIN_ROOTS = {\n  'duc/duct': {\n    meaning: 'to lead',\n    derivatives: ['conduct', 'deduce', 'produce', 'education', 'induct']\n  },\n  'mit/miss': {\n    meaning: 'to send',\n    derivatives: ['submit', 'mission', 'transmit', 'permit', 'admission']\n  },\n  'port': {\n    meaning: 'to carry',\n    derivatives: ['transport', 'portable', 'export', 'import', 'deport']\n  },\n  'spec/spect': {\n    meaning: 'to look',\n    derivatives: ['inspect', 'spectacle', 'perspective', 'spectator', 'retrospect']\n  },\n  'vid/vis': {\n    meaning: 'to see',\n    derivatives: ['video', 'vision', 'visible', 'visual', 'evidence']\n  },\n  'scrib/script': {\n    meaning: 'to write',\n    derivatives: ['describe', 'script', 'prescribe', 'subscription', 'manuscript']\n  },\n  'aud/audit': {\n    meaning: 'to hear',\n    derivatives: ['audio', 'auditorium', 'audible', 'audience', 'audition']\n  },\n  'grad/gress': {\n    meaning: 'to step',\n    derivatives: ['graduate', 'progress', 'degree', 'congress', 'digress']\n  },\n  'ject': {\n    meaning: 'to throw',\n    derivatives: ['project', 'reject', 'inject', 'eject', 'trajectory']\n  },\n  'struct': {\n    meaning: 'to build',\n    derivatives: ['construct', 'structure', 'instruct', 'destruction', 'infrastructure']\n  }\n};\n\n// Extended Greek roots\nconst GREEK_ROOTS = {\n  'bio': {\n    meaning: 'life',\n    derivatives: ['biology', 'biography', 'symbiotic', 'biosphere', 'biochemistry']\n  },\n  'phil': {\n    meaning: 'love',\n    derivatives: ['philosophy', 'philanthropy', 'philology', 'bibliophile', 'philharmonic']\n  },\n  'logos': {\n    meaning: 'study/word',\n    derivatives: ['psychology', 'biology', 'mythology', 'anthropology', 'geology']\n  },\n  'demos': {\n    meaning: 'people',\n    derivatives: ['democracy', 'demographic', 'epidemic', 'pandemic', 'endemic']\n  },\n  'chronos': {\n    meaning: 'time',\n    derivatives: ['chronology', 'synchronize', 'chronic', 'chronicle', 'anachronism']\n  },\n  'tele': {\n    meaning: 'far',\n    derivatives: ['telephone', 'telescope', 'television', 'telepathy', 'teleport']\n  },\n  'photo': {\n    meaning: 'light',\n    derivatives: ['photograph', 'photosynthesis', 'photon', 'photocopy', 'photogenic']\n  },\n  'geo': {\n    meaning: 'earth',\n    derivatives: ['geography', 'geology', 'geometry', 'geothermal', 'geopolitical']\n  },\n  'hydro': {\n    meaning: 'water',\n    derivatives: ['hydrate', 'hydroelectric', 'hydrogen', 'dehydrate', 'hydraulic']\n  },\n  'thermo': {\n    meaning: 'heat',\n    derivatives: ['thermometer', 'thermostat', 'thermal', 'thermonuclear', 'isotherm']\n  }\n};\n\n// Extended Sanskrit roots\nconst SANSKRIT_ROOTS = {\n  'guru': {\n    meaning: 'teacher',\n    derivatives: ['guru', 'gurukul', 'gurudev']\n  },\n  'yoga': {\n    meaning: 'union',\n    derivatives: ['yoga', 'yogic', 'yogi', 'yogini', 'pranayama']\n  },\n  'karma': {\n    meaning: 'action/deed',\n    derivatives: ['karma', 'karmic', 'karmayoga']\n  },\n  'man/manas': {\n    meaning: 'to think',\n    derivatives: ['mantra', 'mental', 'manas', 'manomaya']\n  },\n  'vid': {\n    meaning: 'to know',\n    derivatives: ['veda', 'vidya', 'avidya', 'vidyarthi']\n  },\n  'dhar': {\n    meaning: 'to hold',\n    derivatives: ['dharma', 'dharmic', 'dharan']\n  },\n  'budh': {\n    meaning: 'to know/awaken',\n    derivatives: ['buddha', 'buddhi', 'buddhist']\n  },\n  'nam': {\n    meaning: 'to bow',\n    derivatives: ['namaste', 'namaskar', 'pranam']\n  }\n};\n\n// Extended Germanic roots\nconst GERMANIC_ROOTS = {\n  'ber': {\n    meaning: 'to carry',\n    derivatives: ['bear', 'burden', 'forbear', 'bearing']\n  },\n  'kom': {\n    meaning: 'to come',\n    derivatives: ['come', 'become', 'welcome', 'overcome', 'incoming']\n  },\n  'seg': {\n    meaning: 'to say',\n    derivatives: ['say', 'saga', 'saw', 'saying', 'unsaid']\n  },\n  'wer': {\n    meaning: 'man/person',\n    derivatives: ['werewolf', 'world', 'weregild']\n  },\n  'fol': {\n    meaning: 'people',\n    derivatives: ['folk', 'folklore', 'folkway']\n  },\n  'wald': {\n    meaning: 'to rule',\n    derivatives: ['wield', 'waldgrave', 'herald']\n  },\n  'hus': {\n    meaning: 'house',\n    derivatives: ['house', 'husband', 'housing']\n  },\n  'burg': {\n    meaning: 'fortress',\n    derivatives: ['borough', 'burgher', 'burglar']\n  }\n};\n\n// Combined language roots object\nconst LANGUAGE_ROOTS = {\n  LATIN: {\n    name: 'Latin',\n    period: 'Classical',\n    roots: LATIN_ROOTS\n  },\n  GREEK: {\n    name: 'Ancient Greek',\n    period: 'Classical',\n    roots: GREEK_ROOTS\n  },\n  SANSKRIT: {\n    name: 'Sanskrit',\n    period: 'Ancient',\n    roots: SANSKRIT_ROOTS\n  },\n  GERMANIC: {\n    name: 'Proto-Germanic',\n    period: 'Ancient',\n    roots: GERMANIC_ROOTS\n  }\n};\n\n// Enhanced evolution paths with more detailed stages\nconst EVOLUTION_PATHS = {\n  ROMANCE: {\n    path: ['Classical Latin', 'Vulgar Latin', 'Old French/Spanish/Italian', 'Middle French/Spanish/Italian', 'Modern Romance'],\n    examples: {\n      'porta': {\n        'Classical Latin': 'porta',\n        'Vulgar Latin': 'porta',\n        'Old French': 'porte',\n        'Middle French': 'porte',\n        'Modern French': 'porte',\n        'Old Spanish': 'puerta',\n        'Modern Spanish': 'puerta',\n        'Old Italian': 'porta',\n        'Modern Italian': 'porta',\n        'Portuguese': 'porta'\n      },\n      'terra': {\n        'Classical Latin': 'terra',\n        'Vulgar Latin': 'terra',\n        'Old French': 'terre',\n        'Modern French': 'terre',\n        'Spanish': 'tierra',\n        'Italian': 'terra',\n        'Portuguese': 'terra'\n      }\n    }\n  },\n  GERMANIC: {\n    path: ['Proto-Germanic', 'Old English/Old High German', 'Middle English/Middle High German', 'Early Modern English/German', 'Modern Germanic'],\n    examples: {\n      'water': {\n        'Proto-Germanic': '*watōr',\n        'Old English': 'wæter',\n        'Middle English': 'water',\n        'Modern English': 'water',\n        'Old High German': 'wazzar',\n        'Modern German': 'Wasser',\n        'Dutch': 'water',\n        'Swedish': 'vatten'\n      },\n      'house': {\n        'Proto-Germanic': '*hūsą',\n        'Old English': 'hūs',\n        'Middle English': 'hous',\n        'Modern English': 'house',\n        'Old High German': 'hūs',\n        'Modern German': 'Haus',\n        'Dutch': 'huis'\n      }\n    }\n  },\n  HELLENIC: {\n    path: ['Ancient Greek', 'Koine Greek', 'Medieval Greek', 'Modern Greek'],\n    examples: {\n      'phosphoros': {\n        'Ancient Greek': 'φωσφόρος',\n        'Koine Greek': 'φωσφόρος',\n        'Medieval Greek': 'φωσφόρος',\n        'Modern Greek': 'φώσφορος'\n      }\n    }\n  }\n};\nconst analyzeWord = word => {\n  console.log('Analyzing word:', word);\n  let analysis = {\n    root: null,\n    origin: null,\n    period: null,\n    meaning: null,\n    derivatives: [],\n    evolutionPath: null\n  };\n\n  // Search through all language roots\n  for (const [rootFamily, data] of Object.entries(LANGUAGE_ROOTS)) {\n    for (const [root, info] of Object.entries(data.roots)) {\n      const rootParts = root.split('/');\n      if (rootParts.some(part => word.toLowerCase().includes(part.toLowerCase()))) {\n        analysis = {\n          root: root,\n          origin: data.name,\n          period: data.period,\n          meaning: info.meaning,\n          derivatives: info.derivatives,\n          evolutionPath: findEvolutionPath(rootFamily, word)\n        };\n        console.log('Found etymology:', analysis);\n        return analysis;\n      }\n    }\n  }\n  console.log('No etymology found for word:', word);\n  return analysis;\n};\nconst findEvolutionPath = (rootFamily, word) => {\n  // Find relevant evolution path based on root family\n  let path = null;\n  switch (rootFamily) {\n    case 'LATIN':\n      path = EVOLUTION_PATHS.ROMANCE;\n      break;\n    case 'GERMANIC':\n      path = EVOLUTION_PATHS.GERMANIC;\n      break;\n    case 'GREEK':\n      path = EVOLUTION_PATHS.HELLENIC;\n      break;\n    default:\n      return null;\n  }\n  if (!path) return null;\n\n  // Look for exact matches in examples\n  const exactMatch = path.examples[word];\n  if (exactMatch) {\n    return {\n      stages: path.path,\n      examples: exactMatch\n    };\n  }\n\n  // If no exact match, return the general evolution path\n  return {\n    stages: path.path,\n    examples: null\n  };\n};\nexport { analyzeWord, LANGUAGE_ROOTS, EVOLUTION_PATHS };","map":{"version":3,"names":["LATIN_ROOTS","meaning","derivatives","GREEK_ROOTS","SANSKRIT_ROOTS","GERMANIC_ROOTS","LANGUAGE_ROOTS","LATIN","name","period","roots","GREEK","SANSKRIT","GERMANIC","EVOLUTION_PATHS","ROMANCE","path","examples","HELLENIC","analyzeWord","word","console","log","analysis","root","origin","evolutionPath","rootFamily","data","Object","entries","info","rootParts","split","some","part","toLowerCase","includes","findEvolutionPath","exactMatch","stages"],"sources":["/Users/BrooksCole/Documents/reading-community/frontend/src/services/etymologyService.js"],"sourcesContent":["// frontend/src/services/etymologyService.js\n\n// Extended Latin roots\nconst LATIN_ROOTS = {\n  'duc/duct': { meaning: 'to lead', derivatives: ['conduct', 'deduce', 'produce', 'education', 'induct'] },\n  'mit/miss': { meaning: 'to send', derivatives: ['submit', 'mission', 'transmit', 'permit', 'admission'] },\n  'port': { meaning: 'to carry', derivatives: ['transport', 'portable', 'export', 'import', 'deport'] },\n  'spec/spect': { meaning: 'to look', derivatives: ['inspect', 'spectacle', 'perspective', 'spectator', 'retrospect'] },\n  'vid/vis': { meaning: 'to see', derivatives: ['video', 'vision', 'visible', 'visual', 'evidence'] },\n  'scrib/script': { meaning: 'to write', derivatives: ['describe', 'script', 'prescribe', 'subscription', 'manuscript'] },\n  'aud/audit': { meaning: 'to hear', derivatives: ['audio', 'auditorium', 'audible', 'audience', 'audition'] },\n  'grad/gress': { meaning: 'to step', derivatives: ['graduate', 'progress', 'degree', 'congress', 'digress'] },\n  'ject': { meaning: 'to throw', derivatives: ['project', 'reject', 'inject', 'eject', 'trajectory'] },\n  'struct': { meaning: 'to build', derivatives: ['construct', 'structure', 'instruct', 'destruction', 'infrastructure'] }\n};\n\n// Extended Greek roots\nconst GREEK_ROOTS = {\n  'bio': { meaning: 'life', derivatives: ['biology', 'biography', 'symbiotic', 'biosphere', 'biochemistry'] },\n  'phil': { meaning: 'love', derivatives: ['philosophy', 'philanthropy', 'philology', 'bibliophile', 'philharmonic'] },\n  'logos': { meaning: 'study/word', derivatives: ['psychology', 'biology', 'mythology', 'anthropology', 'geology'] },\n  'demos': { meaning: 'people', derivatives: ['democracy', 'demographic', 'epidemic', 'pandemic', 'endemic'] },\n  'chronos': { meaning: 'time', derivatives: ['chronology', 'synchronize', 'chronic', 'chronicle', 'anachronism'] },\n  'tele': { meaning: 'far', derivatives: ['telephone', 'telescope', 'television', 'telepathy', 'teleport'] },\n  'photo': { meaning: 'light', derivatives: ['photograph', 'photosynthesis', 'photon', 'photocopy', 'photogenic'] },\n  'geo': { meaning: 'earth', derivatives: ['geography', 'geology', 'geometry', 'geothermal', 'geopolitical'] },\n  'hydro': { meaning: 'water', derivatives: ['hydrate', 'hydroelectric', 'hydrogen', 'dehydrate', 'hydraulic'] },\n  'thermo': { meaning: 'heat', derivatives: ['thermometer', 'thermostat', 'thermal', 'thermonuclear', 'isotherm'] }\n};\n\n// Extended Sanskrit roots\nconst SANSKRIT_ROOTS = {\n  'guru': { meaning: 'teacher', derivatives: ['guru', 'gurukul', 'gurudev'] },\n  'yoga': { meaning: 'union', derivatives: ['yoga', 'yogic', 'yogi', 'yogini', 'pranayama'] },\n  'karma': { meaning: 'action/deed', derivatives: ['karma', 'karmic', 'karmayoga'] },\n  'man/manas': { meaning: 'to think', derivatives: ['mantra', 'mental', 'manas', 'manomaya'] },\n  'vid': { meaning: 'to know', derivatives: ['veda', 'vidya', 'avidya', 'vidyarthi'] },\n  'dhar': { meaning: 'to hold', derivatives: ['dharma', 'dharmic', 'dharan'] },\n  'budh': { meaning: 'to know/awaken', derivatives: ['buddha', 'buddhi', 'buddhist'] },\n  'nam': { meaning: 'to bow', derivatives: ['namaste', 'namaskar', 'pranam'] }\n};\n\n// Extended Germanic roots\nconst GERMANIC_ROOTS = {\n  'ber': { meaning: 'to carry', derivatives: ['bear', 'burden', 'forbear', 'bearing'] },\n  'kom': { meaning: 'to come', derivatives: ['come', 'become', 'welcome', 'overcome', 'incoming'] },\n  'seg': { meaning: 'to say', derivatives: ['say', 'saga', 'saw', 'saying', 'unsaid'] },\n  'wer': { meaning: 'man/person', derivatives: ['werewolf', 'world', 'weregild'] },\n  'fol': { meaning: 'people', derivatives: ['folk', 'folklore', 'folkway'] },\n  'wald': { meaning: 'to rule', derivatives: ['wield', 'waldgrave', 'herald'] },\n  'hus': { meaning: 'house', derivatives: ['house', 'husband', 'housing'] },\n  'burg': { meaning: 'fortress', derivatives: ['borough', 'burgher', 'burglar'] }\n};\n\n// Combined language roots object\nconst LANGUAGE_ROOTS = {\n  LATIN: {\n    name: 'Latin',\n    period: 'Classical',\n    roots: LATIN_ROOTS\n  },\n  GREEK: {\n    name: 'Ancient Greek',\n    period: 'Classical',\n    roots: GREEK_ROOTS\n  },\n  SANSKRIT: {\n    name: 'Sanskrit',\n    period: 'Ancient',\n    roots: SANSKRIT_ROOTS\n  },\n  GERMANIC: {\n    name: 'Proto-Germanic',\n    period: 'Ancient',\n    roots: GERMANIC_ROOTS\n  }\n};\n\n// Enhanced evolution paths with more detailed stages\nconst EVOLUTION_PATHS = {\n  ROMANCE: {\n    path: ['Classical Latin', 'Vulgar Latin', 'Old French/Spanish/Italian', 'Middle French/Spanish/Italian', 'Modern Romance'],\n    examples: {\n      'porta': {\n        'Classical Latin': 'porta',\n        'Vulgar Latin': 'porta',\n        'Old French': 'porte',\n        'Middle French': 'porte',\n        'Modern French': 'porte',\n        'Old Spanish': 'puerta',\n        'Modern Spanish': 'puerta',\n        'Old Italian': 'porta',\n        'Modern Italian': 'porta',\n        'Portuguese': 'porta'\n      },\n      'terra': {\n        'Classical Latin': 'terra',\n        'Vulgar Latin': 'terra',\n        'Old French': 'terre',\n        'Modern French': 'terre',\n        'Spanish': 'tierra',\n        'Italian': 'terra',\n        'Portuguese': 'terra'\n      }\n    }\n  },\n  GERMANIC: {\n    path: ['Proto-Germanic', 'Old English/Old High German', 'Middle English/Middle High German', 'Early Modern English/German', 'Modern Germanic'],\n    examples: {\n      'water': {\n        'Proto-Germanic': '*watōr',\n        'Old English': 'wæter',\n        'Middle English': 'water',\n        'Modern English': 'water',\n        'Old High German': 'wazzar',\n        'Modern German': 'Wasser',\n        'Dutch': 'water',\n        'Swedish': 'vatten'\n      },\n      'house': {\n        'Proto-Germanic': '*hūsą',\n        'Old English': 'hūs',\n        'Middle English': 'hous',\n        'Modern English': 'house',\n        'Old High German': 'hūs',\n        'Modern German': 'Haus',\n        'Dutch': 'huis'\n      }\n    }\n  },\n  HELLENIC: {\n    path: ['Ancient Greek', 'Koine Greek', 'Medieval Greek', 'Modern Greek'],\n    examples: {\n      'phosphoros': {\n        'Ancient Greek': 'φωσφόρος',\n        'Koine Greek': 'φωσφόρος',\n        'Medieval Greek': 'φωσφόρος',\n        'Modern Greek': 'φώσφορος'\n      }\n    }\n  }\n};\n\nconst analyzeWord = (word) => {\n  console.log('Analyzing word:', word);\n  let analysis = {\n    root: null,\n    origin: null,\n    period: null,\n    meaning: null,\n    derivatives: [],\n    evolutionPath: null\n  };\n\n  // Search through all language roots\n  for (const [rootFamily, data] of Object.entries(LANGUAGE_ROOTS)) {\n    for (const [root, info] of Object.entries(data.roots)) {\n      const rootParts = root.split('/');\n      if (rootParts.some(part => word.toLowerCase().includes(part.toLowerCase()))) {\n        analysis = {\n          root: root,\n          origin: data.name,\n          period: data.period,\n          meaning: info.meaning,\n          derivatives: info.derivatives,\n          evolutionPath: findEvolutionPath(rootFamily, word)\n        };\n        console.log('Found etymology:', analysis);\n        return analysis;\n      }\n    }\n  }\n  \n  console.log('No etymology found for word:', word);\n  return analysis;\n};\n\nconst findEvolutionPath = (rootFamily, word) => {\n  // Find relevant evolution path based on root family\n  let path = null;\n  \n  switch(rootFamily) {\n    case 'LATIN':\n      path = EVOLUTION_PATHS.ROMANCE;\n      break;\n    case 'GERMANIC':\n      path = EVOLUTION_PATHS.GERMANIC;\n      break;\n    case 'GREEK':\n      path = EVOLUTION_PATHS.HELLENIC;\n      break;\n    default:\n      return null;\n  }\n  \n  if (!path) return null;\n  \n  // Look for exact matches in examples\n  const exactMatch = path.examples[word];\n  if (exactMatch) {\n    return {\n      stages: path.path,\n      examples: exactMatch\n    };\n  }\n  \n  // If no exact match, return the general evolution path\n  return {\n    stages: path.path,\n    examples: null\n  };\n};\n\nexport {\n  analyzeWord,\n  LANGUAGE_ROOTS,\n  EVOLUTION_PATHS\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}