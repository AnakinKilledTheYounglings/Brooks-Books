{"ast":null,"code":"// frontend/src/services/vocabularyService.js\nconst API_URL = 'http://localhost:3001/api';\n\n//const vocabularyService = new VocabularyService();\n\nclass VocabularyService {\n  constructor() {\n    this.token = localStorage.getItem('token');\n  }\n  async addVocabularyWord(wordData) {\n    try {\n      const token = localStorage.getItem('token');\n      const userId = localStorage.getItem('userId');\n      if (!userId) {\n        throw new Error('User ID not found. Please log in again.');\n      }\n      const response = await fetch(`${API_URL}/vocabulary`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          ...wordData,\n          createdBy: userId\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to add vocabulary word');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error adding vocabulary word:', error);\n      throw error;\n    }\n  }\n  async getBookVocabulary(bookId) {\n    try {\n      const response = await fetch(`${API_URL}/vocabulary/book/${bookId}`, {\n        headers: {\n          'Authorization': `Bearer ${this.token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch vocabulary');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching vocabulary:', error);\n      throw error;\n    }\n  }\n  async updateVocabularyWord(id, updateData) {\n    try {\n      const response = await fetch(`${API_URL}/vocabulary/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.token}`\n        },\n        body: JSON.stringify(updateData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update vocabulary word');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error updating vocabulary word:', error);\n      throw error;\n    }\n  }\n  async deleteVocabularyWord(id) {\n    try {\n      const response = await fetch(`${API_URL}/vocabulary/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${this.token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete vocabulary word');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error deleting vocabulary word:', error);\n      throw error;\n    }\n  }\n}\n\n//export default VocabularyService();\nexport default new VocabularyService();","map":{"version":3,"names":["API_URL","VocabularyService","constructor","token","localStorage","getItem","addVocabularyWord","wordData","userId","Error","response","fetch","method","headers","body","JSON","stringify","createdBy","ok","errorData","json","message","error","console","getBookVocabulary","bookId","updateVocabularyWord","id","updateData","deleteVocabularyWord"],"sources":["/Users/BrooksCole/Documents/reading-community/frontend/src/services/vocabularyService.js"],"sourcesContent":["// frontend/src/services/vocabularyService.js\nconst API_URL = 'http://localhost:3001/api';\n\n//const vocabularyService = new VocabularyService();\n\nclass VocabularyService {\n  constructor() {\n    this.token = localStorage.getItem('token');\n  }\n\n  async addVocabularyWord(wordData) {\n    try {\n      const token = localStorage.getItem('token');\n      const userId = localStorage.getItem('userId');\n      \n      if (!userId) {\n        throw new Error('User ID not found. Please log in again.');\n      }\n\n      const response = await fetch(`${API_URL}/vocabulary`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          ...wordData,\n          createdBy: userId\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to add vocabulary word');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error adding vocabulary word:', error);\n      throw error;\n    }\n  }\n\n  async getBookVocabulary(bookId) {\n    try {\n      const response = await fetch(`${API_URL}/vocabulary/book/${bookId}`, {\n        headers: {\n          'Authorization': `Bearer ${this.token}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch vocabulary');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching vocabulary:', error);\n      throw error;\n    }\n  }\n\n  async updateVocabularyWord(id, updateData) {\n    try {\n      const response = await fetch(`${API_URL}/vocabulary/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.token}`\n        },\n        body: JSON.stringify(updateData)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update vocabulary word');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error updating vocabulary word:', error);\n      throw error;\n    }\n  }\n\n  async deleteVocabularyWord(id) {\n    try {\n      const response = await fetch(`${API_URL}/vocabulary/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${this.token}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to delete vocabulary word');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error deleting vocabulary word:', error);\n      throw error;\n    }\n  }\n}\n\n//export default VocabularyService();\nexport default new VocabularyService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}