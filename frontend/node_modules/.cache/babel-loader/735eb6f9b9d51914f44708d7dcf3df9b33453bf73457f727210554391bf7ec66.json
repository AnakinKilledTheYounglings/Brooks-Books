{"ast":null,"code":"var _jsxFileName = \"/Users/BrooksCole/Documents/reading-community/frontend/src/components/BulkUpload.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/BulkUpload.js\nimport React, { useState } from 'react';\nimport { Box, Button, Typography, Alert, CircularProgress, Paper } from '@mui/material';\nimport { CloudUpload } from '@mui/icons-material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BulkUpload() {\n  _s();\n  const [uploading, setUploading] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    // Check file type\n    if (!file.name.endsWith('.xlsx') && !file.name.endsWith('.xls')) {\n      setError('Please upload an Excel file (.xlsx or .xls)');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('bookList', file);\n    setUploading(true);\n    setError(null);\n    setSuccess(false);\n    try {\n      const response = await fetch('http://localhost:3001/api/books/bulk-upload', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: formData\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to upload books');\n      }\n      setSuccess(true);\n      event.target.value = ''; // Reset file input\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setUploading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      p: 3,\n      mb: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"Bulk Upload Books\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        my: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        gutterBottom: true,\n        children: \"Upload an Excel file containing book information. The file should include columns for: title, author, description, genres (comma-separated), and age range.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        component: \"label\",\n        startIcon: uploading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 34\n        }, this) : /*#__PURE__*/_jsxDEV(CloudUpload, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 67\n        }, this),\n        disabled: uploading,\n        sx: {\n          mt: 2\n        },\n        children: [\"Upload Excel File\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          hidden: true,\n          accept: \".xlsx,.xls\",\n          onChange: handleFileUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mt: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"success\",\n      sx: {\n        mt: 2\n      },\n      children: \"Books uploaded successfully!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(BulkUpload, \"gV06bwoFlrTleHIyf8PaoiX56Hg=\");\n_c = BulkUpload;\nexport default BulkUpload;\nvar _c;\n$RefreshReg$(_c, \"BulkUpload\");","map":{"version":3,"names":["React","useState","Box","Button","Typography","Alert","CircularProgress","Paper","CloudUpload","jsxDEV","_jsxDEV","BulkUpload","_s","uploading","setUploading","error","setError","success","setSuccess","handleFileUpload","event","file","target","files","name","endsWith","formData","FormData","append","response","fetch","method","headers","localStorage","getItem","body","data","json","ok","Error","value","err","message","sx","p","mb","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","my","color","component","startIcon","size","disabled","mt","type","hidden","accept","onChange","severity","_c","$RefreshReg$"],"sources":["/Users/BrooksCole/Documents/reading-community/frontend/src/components/BulkUpload.js"],"sourcesContent":["// frontend/src/components/BulkUpload.js\nimport React, { useState } from 'react';\nimport { \n  Box, \n  Button, \n  Typography, \n  Alert,\n  CircularProgress,\n  Paper \n} from '@mui/material';\nimport { CloudUpload } from '@mui/icons-material';\n\nfunction BulkUpload() {\n  const [uploading, setUploading] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(false);\n\n  const handleFileUpload = async (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    // Check file type\n    if (!file.name.endsWith('.xlsx') && !file.name.endsWith('.xls')) {\n      setError('Please upload an Excel file (.xlsx or .xls)');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('bookList', file);\n\n    setUploading(true);\n    setError(null);\n    setSuccess(false);\n\n    try {\n      const response = await fetch('http://localhost:3001/api/books/bulk-upload', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: formData\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to upload books');\n      }\n\n      setSuccess(true);\n      event.target.value = ''; // Reset file input\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  return (\n    <Paper sx={{ p: 3, mb: 3 }}>\n      <Typography variant=\"h6\" gutterBottom>\n        Bulk Upload Books\n      </Typography>\n      \n      <Box sx={{ my: 2 }}>\n        <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n          Upload an Excel file containing book information. The file should include columns for:\n          title, author, description, genres (comma-separated), and age range.\n        </Typography>\n        \n        <Button\n          variant=\"contained\"\n          component=\"label\"\n          startIcon={uploading ? <CircularProgress size={20} /> : <CloudUpload />}\n          disabled={uploading}\n          sx={{ mt: 2 }}\n        >\n          Upload Excel File\n          <input\n            type=\"file\"\n            hidden\n            accept=\".xlsx,.xls\"\n            onChange={handleFileUpload}\n          />\n        </Button>\n      </Box>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mt: 2 }}>\n          {error}\n        </Alert>\n      )}\n\n      {success && (\n        <Alert severity=\"success\" sx={{ mt: 2 }}>\n          Books uploaded successfully!\n        </Alert>\n      )}\n    </Paper>\n  );\n}\n\nexport default BulkUpload;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}